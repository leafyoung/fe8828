}
#TransacTable
TransacTable
#In this chut, we define a Withdraw transaction generating function,
#Then use this function generate Withdraws according to present balance calculated by Balance = sum(Deposite + Withdraw), where Deposit is negative value
generWithd <- function(oldtable,accountNum,Date)
{ tmpAmount=0
tmpAccount <-accountNum
tmpType <- as.character('Withdraw')
#calculate balance
df<-oldtable
tmpdf1<-dplyr::filter(oldtable,(Account ==tmpAccount)&(dateSeq<=Date))
if (!empty(tmpdf1)){
totalBalance<-dplyr::filter(oldtable,(Account ==tmpAccount)&(dateSeq<=Date))%>%dplyr::filter((TransType=='Deposit')|(TransType=='Withdraw'))%>%select(c('Amount'))%>%sum()
balance = -totalBalance-InitialDeposit[tmpAccount]
tmpAmount <- round(runif(1,min=balance,max=0),digits=2)
if(!is.na(tmpAmount)){
if (tmpAmount < 0) {
Cur <-round(runif(1,min=1,max=3))
tmpCur <- as.character(currency[Cur])
df<-data.frame(Date,tmpAccount,tmpType,tmpAmount,tmpCur)
df$tmpType<-as.character(df$tmpType)
df$tmpCur<-as.character(df$tmpCur)
newTitle <- c('dateSeq','Account','TransType','Amount','Cur')
colnames(df)<-newTitle
df<-rbind(oldtable,df)
df
}}}
df
}
dateSeq<-as.Date(dateSeq)
#loop
for (i in 1:ndate){
today <- dateSeq[i]
for (j in 1:10){
account = j
TransacTable<-generWithd(TransacTable,account,today)
}
}
TransacTable
library(quantmod)
library(fOptions)
library(timeSeries)
library(tidyr)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, fig.align="center", collapse = TRUE, cache = TRUE)
data = read.csv("Option_Price.csv", sep=",", stringsAsFactors = FALSE)
data.xts = xts(x = data[,-1, drop = F],order.by = as.Date(data[,1], "%d-%B-%y")) #Create xts object
dates = index(data.xts) #pick a date range using xts object
last_test_date = max(dates) - 29 #Hedge over 29 days for a 30day option
last_date_index = sum(dates <= last_test_date)
data
end_date = start_date + 29 #hedging period is 29 days for a 30day option
#set details of option
start_date = dates[1]
end_date = start_date + 29 #hedging period is 29 days for a 30day option
start_price = as.numeric(data.xts[start_date,"Close"]) #current stock price
start_volatility = data.xts[start_date,"IV30"] #volatility
Strike = as.numeric(start_price) #strike price
vol = as.numeric(start_volatility)/100 #volatility
rf = 0.8/100 #risk-free rate
Q = 100 #number of options
#define max drawdown function
maxD = function(DailyPnL){
PnL = cumsum(DailyPnL)
mD = 0
mD <- max(cummax(PnL) - cummin(PnL))
mD
}
#To change data type to numeric
df = tibble(dates[dates<=end_date & dates>=start_date])
names(df) = "Date"
df$Close = as.numeric(data.xts[paste0(start_date,"/",end_date), "Close"])
df
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date-Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol), #Calculating option delta
Option_DoD_PnL = ifelse(Date == start_date, 0, Q*(premium - lag(premium))), #daily option PnL
Option_DoD_Ret = ifelse(Date == start_date, 0, (premium - lag(premium))/lag(premium)), #daily option PnL expressed as returns
Hedging_DoD_PnL = ifelse(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)), #daily hedging PnL
Hedging_DoD_Ret = ifelse(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close), #daily hedging PnL expressed as returns
Daily_PnL = Option_DoD_PnL + Hedging_DoD_PnL, #total daily PnL
Daily_Ret = ifelse(Date == start_date,0 ,Daily_PnL/(Close + lag(premium))) #total daily PnL expressed as returns
) -> df
df
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date-Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol), #Calculating option delta
Option_DoD_PnL = ifelse(Date == start_date, 0, Q*(premium - lag(premium))), #daily option PnL
Option_DoD_Ret = ifelse(Date == start_date, 0, (premium - lag(premium))/lag(premium)), #daily option PnL expressed as returns
Hedging_DoD_PnL = ifelse(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)), #daily hedging PnL
Hedging_DoD_Ret = ifelse(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close), #daily hedging PnL expressed as returns
Daily_PnL = Option_DoD_PnL + Hedging_DoD_PnL, #total daily PnL
Daily_Ret = ifelse(Date == start_date,0 ,Daily_PnL/(Close + lag(premium))) #total daily PnL expressed as returns
) -> df
df
#summarize table of PnL and max drawdown
df %>% summarize(Stock_PnL = sum(Hedging_DoD_PnL), Stock_maxD = maxD(Hedging_DoD_PnL), Option_PnL = sum(Option_DoD_PnL), Option_maxD = maxD(Option_DoD_PnL), PnL = sum(Daily_PnL), maxDrawdown = maxD(Daily_PnL))
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date-Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol), #Calculating option delta
Option_DoD_PnL = if_else(Date == start_date, 0, Q*(premium - lag(premium))), #daily option PnL
Option_DoD_Ret = if_else(Date == start_date, 0, (premium - lag(premium))/lag(premium)), #daily option PnL expressed as returns
Hedging_DoD_PnL = if_else(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)), #daily hedging PnL
Hedging_DoD_Ret = if_else(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close), #daily hedging PnL expressed as returns
Daily_PnL = Option_DoD_PnL + Hedging_DoD_PnL, #total daily PnL
Daily_Ret = if_else(Date == start_date,0 ,Daily_PnL/(Close + lag(premium))) #total daily PnL expressed as returns
) -> df
df
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date-Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)) %>% #Calculating option delta
mutate(Option_DoD_PnL = if_else(Date == start_date, 0, Q*(premium - lag(premium))), #daily option PnL
Option_DoD_Ret = if_else(Date == start_date, 0, (premium - lag(premium))/lag(premium)), #daily option PnL expressed as returns
Hedging_DoD_PnL = if_else(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)), #daily hedging PnL
Hedging_DoD_Ret = if_else(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close), #daily hedging PnL expressed as returns
Daily_PnL = Option_DoD_PnL + Hedging_DoD_PnL, #total daily PnL
Daily_Ret = if_else(Date == start_date,0 ,Daily_PnL/(Close + lag(premium))) #total daily PnL expressed as returns
) -> df
df
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date-Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)) -> df #Calculating option delta
df
#To change data type to numeric
df = tibble(dates[dates<=end_date & dates>=start_date])
#To change data type to numeric
df = tibble(dates[dates<=end_date & dates>=start_date])
names(df) = "Date"
df$Close = as.numeric(data.xts[paste0(start_date,"/",end_date), "Close"])
df
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date-Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)) -> df #Calculating option delta
df
lag <- dplyr::lag
df
df %>% mutate(Option_DoD_PnL = if_else(Date == start_date, 0, Q*(premium - lag(premium))), #daily option PnL
Option_DoD_Ret = if_else(Date == start_date, 0, (premium - lag(premium))/lag(premium)), #daily option PnL expressed as returns
Hedging_DoD_PnL = if_else(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)), #daily hedging PnL
Hedging_DoD_Ret = if_else(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close), #daily hedging PnL expressed as returns
Daily_PnL = Option_DoD_PnL + Hedging_DoD_PnL, #total daily PnL
Daily_Ret = if_else(Date == start_date,0 ,Daily_PnL/(Close + lag(premium))) #total daily PnL expressed as returns
) -> df
df
#summarize table of PnL and max drawdown
df %>% summarize(Stock_PnL = sum(Hedging_DoD_PnL), Stock_maxD = maxD(Hedging_DoD_PnL), Option_PnL = sum(Option_DoD_PnL), Option_maxD = maxD(Option_DoD_PnL), PnL = sum(Daily_PnL), maxDrawdown = maxD(Daily_PnL))
#calculate sharpe ratio
Sharpe_option = (mean(df$Option_DoD_Ret)-exp(rf/365)+1)/sd(df$Option_DoD_Ret)
Sharpe_stock = (mean(df$Hedging_DoD_Ret) - exp(rf/365)+1)/sd(df$Hedging_DoD_Ret)
Sharpe_total = (mean(df$Daily_Ret) - exp(rf/365)+1)/sd(df$Daily_Ret)
Sharpe_table = cbind(Sharpe_option,Sharpe_stock,Sharpe_total)
Sharpe_table
#Plot of Daily PnL
ggplot(df) + geom_line(aes(Date, Daily_PnL, color = "Daily PnL")) + geom_line(aes(Date, Hedging_DoD_PnL, color = "Stock PnL")) + geom_line(aes(Date, Option_DoD_PnL, color = "Option PnL")) + ggtitle("Plot of Daily PnL") +   scale_color_manual(name = "Daily PnL", values = c("Daily PnL" = "black", "Stock PnL"="green", "Option PnL"="blue"))
#Plot of Cumulative PnL
df %>% transmute(Date, cum_Option_PnL = cumsum(Option_DoD_PnL), cum_Stock_PnL = cumsum(Hedging_DoD_PnL), cum_PnL = cumsum(Daily_PnL)) -> df_cumsum
ggplot(df_cumsum) +geom_line(aes(Date,cum_PnL, color = "Total PnL")) + geom_line(aes(Date, cum_Stock_PnL, color = "Stock PnL")) + geom_line(aes(Date, cum_Option_PnL, color = "Option PnL")) + ggtitle("Plot of Cumulative PnL") +   scale_color_manual(name = "Cumulative Daily PnL", values = c("Total PnL" = "black", "Stock PnL"="green", "Option PnL"="blue")) + ylab("Cumulative PnL")
#Bakctesting
#Using a for loop to backtest the remaining days of the data
BackTest = data.frame(StartDate = character(0),TotalPnL = numeric(0), StockPnL = numeric(0), OptionPnL = numeric(0),maxDrawdown = numeric(0),Sharpe_stock = numeric(0), Sharpe_option = numeric(0), Sharpe_total = numeric(0), stringsAsFactors = FALSE) #generate
for(i in 1:last_date_index){
#Set details of Option
start_date = dates[i]
end_date = start_date + 29
start_price = as.numeric(data.xts[start_date,"Close"])
start_volatility = data.xts[start_date,"IV30"]
Strike = as.numeric(start_price)
vol = as.numeric(start_volatility)/100
rf = 0.8/100
Q = 100
df2 = tibble(dates[dates<=end_date & dates>=start_date]) #for nicer representation of dataframe
names(df2) = "Date"
df2$Close = as.numeric(data.xts[paste0(start_date,"/",end_date), "Close"])
#Calculate Option price, option delta, and PnL
df2 %>%
mutate(Time = as.numeric(end_date - Date)/365,
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price,
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol),
Option_DoD_PnL = ifelse(Date == start_date, 0, Q*(premium - lag(premium))),
Option_DoD_Ret = ifelse(Date == start_date, 0, (premium - lag(premium))/lag(premium)),
Hedging_DoD_PnL = ifelse(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)),
Hedging_DoD_Ret = ifelse(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close),
Daily_PnL = Option_DoD_PnL + Hedging_DoD_PnL,
Daily_Ret = ifelse(Date == start_date,0 ,Daily_PnL/(Close + lag(premium)))
) -> df2
#Max drawdown
df2 %>% summarize(Option_PnL = sum(Option_DoD_PnL), Option_maxD = maxD(Option_DoD_PnL), Stock_PnL = sum(Hedging_DoD_PnL), Stock_maxD = maxD(Hedging_DoD_PnL), PnL = sum(Daily_PnL), maxDrawdown = maxD(Daily_PnL)) -> bt_maxD
#Sharpe Ratio
df2 %>% summarize(Sharpe_stock = (mean(Hedging_DoD_Ret) - exp(rf/365)+1)/sd(Hedging_DoD_Ret), Sharpe_option = (mean(Option_DoD_Ret)-exp(rf/365)+1)/sd(Option_DoD_Ret), Sharpe_total = (mean(Daily_Ret) - exp(rf/365)+1)/sd(Daily_Ret)) -> bt_Sharpe
#Cumulative PnL
df2 %>% mutate(cum_Option_PnL = cumsum(Option_DoD_PnL), cum_Stock_PnL = cumsum(Hedging_DoD_PnL), cum_PnL = cumsum(Daily_PnL)) %>% filter(row_number() == n()) -> bt_PnL
BackTest = add_row(BackTest, StartDate = as.character(start_date), TotalPnL = bt_PnL$cum_PnL[1], StockPnL = bt_PnL$cum_Stock_PnL[1], OptionPnL = bt_PnL$cum_Option_PnL[1], maxDrawdown = bt_maxD$maxDrawdown[1], Sharpe_stock = bt_Sharpe$Sharpe_stock, Sharpe_option = bt_Sharpe$Sharpe_option, Sharpe_total = bt_Sharpe$Sharpe_total)
}
BackTest
last_date_index
plot(BackTest$StartDate, BackTest$TotalPnL)
str(BackTest)
plot(BackTest$TotalPnL)
plot(BackTest$StartDate)
BackTest$StartDate.
BackTest$StartDate
str(BackTest)
plot(as.Date(BackTest$StartDate), BackTest$TotalPnL)
plot(as.Date(BackTest$StartDate), BackTest$Sharpe_option)
plot(as.Date(BackTest$StartDate), BackTest$maxDrawdown)
#To calculate max drawdown in dollars
maxDD_Dollar = function(DailyPnL){
PnL = cumsum(DailyPnL)
mDD = 0
for(i in 2:length(PnL)){
M = max(PnL[1:i])
DD = M - PnL[i]
if(DD > mDD)
mDD = DD
}
mDD
}
#To calculate max drawdown in % using gross returns
maxDD_Ret = function(DailyRet){
Ret = cumprod(DailyRet+1)
mDD = 0
for(i in 2:length(Ret)){
M = max(Ret[1:i])
DD = M - Ret[i]
if(DD > mDD)
mDD = DD
}
mDD
}
getwd()
data = read.csv("FBData.csv", sep=",", stringsAsFactors = FALSE) #Read stock and options data from csv file into dataframe
data.xts = xts(x = data[,-1, drop = F],order.by = as.Date(data[,1], "%d-%B-%y")) #Create xts object to store data from dataframe
dates = index(data.xts) #pick a date range using xts object
last_test_date = max(dates) - 29 #Hedge over 29 days for a 30day option
last_date_index = sum(dates <= last_test_date)
data = read.csv("FBData.csv", sep=",", stringsAsFactors = FALSE) #Read stock and options data from csv file into dataframe
data.xts = xts(x = data[,-1, drop = F],order.by = as.Date(data[,1], "%d-%B-%y")) #Create xts object to store data from dataframe
dates = index(data.xts) #pick a date range using xts object
last_test_date = max(dates) - 29 #Hedge over 29 days for a 30day option
last_date_index = sum(dates <= last_test_date)
start_date = dates[1]
end_date = start_date + 29 #hedging period is 29 days for a 30day option
start_price = as.numeric(data.xts[start_date,"Close"]) #current stock price
start_volatility = data.xts[start_date,"IV30"] #volatility
Strike = as.numeric(start_price) #strike price
vol = as.numeric(start_volatility)/100 #volatility
rf = 0.8/100 #risk-free rate
Q = 100 #quantity of options
df = tibble(dates[dates<=end_date & dates>=start_date]) #Using tibble for better representation of the dataframe
names(df) = "Date"
df$Close = as.numeric(data.xts[paste0(start_date,"/",end_date), "Close"]) #using xts object to select dates
df %>% #mutate to add columns to dataframe df
mutate(Time = as.numeric(end_date - Date)/365, #Time to expiry for option price calculation
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price, #Calculating call option price for stock without dividend
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol), #Calculating option delta
Option_DoD_PnL = ifelse(Date == start_date, 0, Q*(premium - lag(premium))), #daily option PnL in dollars
Option_DoD_Ret = ifelse(Date == start_date, 0, (premium - lag(premium))/lag(premium)), #daily option PnL expressed as returns
Hedge_DoD_PnL = ifelse(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)), #daily hedging PnL in dollars
Hedge_DoD_Ret = ifelse(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close), #daily hedging PnL expressed as returns
Daily_PnL = Option_DoD_PnL + Hedge_DoD_PnL, #total daily PnL in dollars
Daily_Ret = ifelse(Date == start_date,0 ,Daily_PnL/(Close + lag(premium))) #total daily PnL expressed as returns
) -> df #
df
#summing daily PnL to get total PnL at the end of hedging duration
df %>% summarize(Option_PnL = sum(Option_DoD_PnL), Option_maxDD = maxDD_Dollar(Option_DoD_PnL), Stock_PnL = sum(Hedge_DoD_PnL), Stock_maxDD = maxDD_Dollar(Hedge_DoD_PnL), PnL = sum(Daily_PnL), maxDrawDown = maxDD_Dollar(Daily_PnL))
#Calcuating Sharpe ratio using returns
df %>% summarize(Option_Sharpe = (mean(Option_DoD_Ret)-exp(rf/365)+1)/sd(Option_DoD_Ret), Stock_Sharpe = (mean(Hedge_DoD_Ret) - exp(rf/365)+1)/sd(Hedge_DoD_Ret), Sharpe = (mean(Daily_Ret) - exp(rf/365)+1)/sd(Daily_Ret))
#Using line graphs to track the movements of stock, option and total daily PnL over time
ggplot(df) + geom_line(aes(Date,Daily_PnL, color = "Daily PnL")) + geom_line(aes(Date, Hedge_DoD_PnL, color = "Stock PnL")) + geom_line(aes(Date, Option_DoD_PnL, color = "Option PnL")) + ggtitle("Plot of Daily PnL") +   scale_color_manual(name = "Daily PnL", values = c("Daily PnL" = "green", "Stock PnL"="red", "Option PnL"="blue"))
#cumsum returns the cumulative sum of PnL from day 1 to current day
df %>% mutate(cum_Option_PnL = cumsum(Option_DoD_PnL), cum_Stock_PnL = cumsum(Hedge_DoD_PnL), cum_PnL = cumsum(Daily_PnL)) -> df2
#to track total cumulative PnL over time
ggplot(df2) +geom_line(aes(Date,cum_PnL, color = "Overall PnL")) + geom_line(aes(Date, cum_Stock_PnL, color = "Stock PnL")) + geom_line(aes(Date, cum_Option_PnL, color = "Option PnL")) + ggtitle("Plot of Cumulative PnL") +   scale_color_manual(name = "Cumulative Daily PnL", values = c("Overall PnL" = "green", "Stock PnL"="red", "Option PnL"="blue")) + ylab("Cumulative PnL")
df2 %>%select(cum_PnL, cum_Stock_PnL, cum_Option_PnL) -> Final_PnL_df
Final_PnL_df[nrow(Final_PnL_df),]
#Using a for loop to backtest the remaining days of the data
BackTestResult = data.frame(StartDate = character(0),FinalPnL = numeric(0), StockPnL = numeric(0), OptionPnL = numeric(0),maxDrawDown = numeric(0), OverallSharpe = numeric(0), StockSharpe = numeric(0), OptionSharpe = numeric(0), stringsAsFactors = FALSE) #generate
#Using a for loop to backtest the remaining days of the data
BackTestResult = data.frame(StartDate = character(0),FinalPnL = numeric(0), StockPnL = numeric(0), OptionPnL = numeric(0),maxDrawDown = numeric(0), OverallSharpe = numeric(0), StockSharpe = numeric(0), OptionSharpe = numeric(0), stringsAsFactors = FALSE) #generate
for(i in 1:last_date_index){
#Set details of Option
start_date = dates[i]
end_date = start_date + 29
start_price = as.numeric(data.xts[start_date,"Close"])
start_volatility = data.xts[start_date,"IV30"]
Strike = as.numeric(start_price)
vol = as.numeric(start_volatility)/100
rf = 0.8/100
Q = 100
df.bt = tibble(dates[dates<=end_date & dates>=start_date]) #for nicer representation of dataframe
names(df.bt) = "Date"
df.bt$Close = as.numeric(data.xts[paste0(start_date,"/",end_date), "Close"])
#Compute Option Price, Delta, and PnLs (stock, option and both)
df.bt %>% #Similar to df, df.bt stores prices, delta and PnLs after computation
mutate(Time = as.numeric(end_date - Date)/365,
premium = GBSOption(TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol)@price,
delta = GBSGreeks("delta", TypeFlag = "c", S = Close, X = Strike, Time = Time, r = rf, b = 0, sigma = vol),
Option_DoD_PnL = ifelse(Date == start_date, 0, Q*(premium - lag(premium))),
Option_DoD_Ret = ifelse(Date == start_date, 0, (premium - lag(premium))/lag(premium)),
Hedge_DoD_PnL = ifelse(Date == start_date | Date == end_date, 0, Q*lag(delta)*(lag(Close)-Close)),
Hedge_DoD_Ret = ifelse(Date == start_date | Date == end_date, 0, (lag(Close)-Close)/Close),
Daily_PnL = Option_DoD_PnL + Hedge_DoD_PnL,
Daily_Ret = ifelse(Date == start_date,0 ,Daily_PnL/(Close + lag(premium)))
) -> df.bt
df.bt
#Calculation of maxDD in Dollar Terms
df.bt %>% summarize(Option_PnL = sum(Option_DoD_PnL), Option_maxDD = maxDD_Dollar(Option_DoD_PnL), Stock_PnL = sum(Hedge_DoD_PnL), Stock_maxDD = maxDD_Dollar(Hedge_DoD_PnL), PnL = sum(Daily_PnL), maxDrawDown = maxDD_Dollar(Daily_PnL)) -> maxDD.bt
#Calculation of Sharpe Ratio
df.bt %>% summarize(Option_Sharpe = (mean(Option_DoD_Ret)-exp(rf/365)+1)/sd(Option_DoD_Ret), Stock_Sharpe = (mean(Hedge_DoD_Ret) - exp(rf/365)+1)/sd(Hedge_DoD_Ret), Sharpe = (mean(Daily_Ret) - exp(rf/365)+1)/sd(Daily_Ret)) ->Sharpe.bt
#Plot of Cumulative PnL
df.bt %>% mutate(cum_Option_PnL = cumsum(Option_DoD_PnL), cum_Stock_PnL = cumsum(Hedge_DoD_PnL), cum_PnL = cumsum(Daily_PnL)) %>% filter(row_number() == n()) -> PnL.bt
#Appending backtesting data to dataframe
BackTestResult = add_row(BackTestResult, StartDate = as.character(start_date), FinalPnL = PnL.bt$cum_PnL[1], StockPnL = PnL.bt$cum_Stock_PnL[1], OptionPnL = PnL.bt$cum_Option_PnL[1], maxDrawDown = maxDD.bt$maxDrawDown[1], OverallSharpe = Sharpe.bt$Sharpe, StockSharpe = Sharpe.bt$Stock_Sharpe, OptionSharpe = Sharpe.bt$Option_Sharpe)
}
BackTestResult
ggplot(data = BackTestResult, aes(FinalPnL)) + geom_histogram(binwidth = 100, aes(y = ..density..)) +  stat_function(fun = dnorm,
args = list(mean = mean(BackTestResult$FinalPnL), sd = sd(BackTestResult$FinalPnL)),
lwd = 1,
col = 'red') +
xlab("Final PnL") + ylab("Density") + ggtitle("Final PnL Distribution")
ggplot(data = BackTestResult) + geom_density(aes(FinalPnL, fill = "Overall PnL"), alpha = 0.5) + geom_density(aes(StockPnL, fill = "Stock PnL"), alpha = 0.5) + geom_density(aes(OptionPnL, fill = "Option PnL"), alpha = 0.5) + scale_fill_manual(name = "Final PnL", values = c("Overall PnL" = "green", "Stock PnL"="red", "Option PnL"="blue"))
ggplot(data = BackTestResult) + geom_density(aes(OverallSharpe, fill = "Overall Sharpe"), alpha = 0.5) + geom_density(aes(StockSharpe, fill = "Stock Sharpe"), alpha = 0.5) + geom_density(aes(OptionSharpe, fill = "Option Sharpe"), alpha = 0.5) + scale_fill_manual(name = "Sharpe Ratios", values = c("Overall Sharpe" = "green", "Stock Sharpe"="red", "Option Sharpe"="blue"))
ggplot(data = BackTestResult, aes(maxDrawDown)) + geom_histogram(binwidth = 100) + geom_density(aes(y = ..density..*30000), color = "blue") + ggtitle("Max Drawdown Distribution") + xlab("Max Drawdown") + ylab("Count")
ggplot(BackTestResult) + geom_line(aes(as.Date(StartDate)+29,FinalPnL), color = "red") + xlab("Option Expiry Date") + ylab("Final PnL") + ggtitle("Final PnL Against Option Expiry Date")
library(xts)
library(knitr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(fOptions)
library(timeSeries)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, fig.align="center", collapse = TRUE, cache = TRUE)
rawData <- read.csv("https://dl.dropboxusercontent.com/s/g06cprxvijzezrd/AS2.csv", sep = ",")
library(xts)
library(knitr)
library(tidyverse)
library(lubridate)
library(dplyr)
library(fOptions)
library(timeSeries)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, fig.align="center", collapse = TRUE, cache = TRUE)
rawData <- read.csv("https://dl.dropboxusercontent.com/s/g06cprxvijzezrd/AS2.csv", sep = ",")
#we initialize the xts object by importing the date, Close price & IV30
rawDataXTS <- xts(x = rawData[, -1, drop = F],
order.by = as.Date(rawData$Date, format = "%d/%m/%Y"))
Core_Data = data.frame(coredata(rawDataXTS))
Trading_Date = index(rawDataXTS)
#we construct the dataframe of date, Close price & IV30, by extracting from xts object
Quantity = 100
RF = 0.8/100
df <- tibble(date = Trading_Date)
df$Close <- coredata(rawDataXTS[, "Close"])
df$IV30 <- coredata(rawDataXTS[, "IV30"])
dfOutput <- df[1:sum(Trading_Date <= (max(Trading_Date)-29)),] %>%
mutate(Total_PnL = 0, Option_PnL = 0, Stock_PnL = 0, MaxDrawdown = 0, Sharpe = 0)
dfOutput
for (i in 1:210){
#to initialize the dates af a 30-day trading period
start_date <- as.numeric(df[i,1])
end_date <- start_date + 29
start_price <- as.numeric(df[i,2])
start_volat <- as.numeric(df[i,3])
#this "tempDF" dataframe stores original data from XTS file
tempDF <- tibble(date = Trading_Date[Trading_Date<=end_date & Trading_Date>=start_date]) %>%
rowwise() %>%
mutate(Close = as.numeric(rawDataXTS[date,"Close"])) %>%
ungroup()
#this "df_opt" dataframe is used to calculate premium, delta, investment cost, and to record the PnL
df_opt <- rowwise(tempDF) %>%
#1. calculate option premium
mutate(premium = Quantity*GBSOption(TypeFlag = "c",
S = Close,
X = start_price,
Time = (end_date - as.numeric(date))/365,
r = RF,
b = 0,
sigma = start_volat/100)@price) %>%
ungroup() %>%
#2. calculate option DoD PnL
mutate(Option_DoD_PnL = ifelse(as.numeric(date) == start_date,
0,
premium - lag(premium))) %>%
rowwise() %>%
#3. calculate stocks from Delta hedging
mutate(delta_hedge = GBSGreeks("delta", TypeFlag = "c",
S = Close,
X = start_price,
Time = (end_date - as.numeric(date))/365,
r = RF,
b = 0,
sigma = start_volat/100)*Quantity*(-1)) %>%
ungroup() %>%
#4. calculate stock/hedging DoD PnL
mutate(Hedging_DoD_PnL = ifelse(as.numeric(date) == start_date | as.numeric(date) == end_date,
0,
lag(delta_hedge)*(Close - lag(Close)))) %>%
rowwise() %>%
#5. calculate total DoD PnL, Time to expiry (for later plotting), and cost of hedging
mutate(DoD_PnL = Option_DoD_PnL + Hedging_DoD_PnL,
Time_to_Expiry = end_date - as.numeric(date),
Cost_of_Hedging = Close*delta_hedge) %>%
ungroup() %>%
#6. calculate cumulative PnL, partitioned by option and stock for later plotting
mutate(Cum_PnL = cumsum(DoD_PnL),
Option_Cum_PnL = cumsum(Option_DoD_PnL),
Stock_Cum_PnL = cumsum(Hedging_DoD_PnL))
#in dataframe "dfOutput", we summarize each trade's data by changing the start day in this "for" loop
Final_PnL <- df_opt$Cum_PnL[nrow(df_opt)]
dfOutput[i,4] <- Final_PnL
Option_PnL <- df_opt$Option_Cum_PnL[nrow(df_opt)]
dfOutput[i,5] <- Option_PnL
Stock_PnL <- df_opt$Stock_Cum_PnL[nrow(df_opt)]
dfOutput[i,6] <- Stock_PnL
MaxDrawdown <- max(max(df_opt$Cum_PnL) - min(df_opt$Cum_PnL))
dfOutput[i,7] <- MaxDrawdown
Sharpe <- (mean(df_opt$DoD_PnL)-RF*(df_opt$premium[1]+max(df_opt$Cost_of_Hedging)))/stdev(df_opt$DoD_PnL)
dfOutput[i,8] <- Sharpe
#when we complete this "for" loop, the recorded variables are for last trade, 2017/10/31 - 2017/11/29
}
cat(paste0("Final PnL: $", sprintf("%.2f",Final_PnL), ".\n" ))
cat(paste0("Option PnL: $", sprintf("%.2f",Option_PnL), ".\n" ))
cat(paste0("Stock PnL: $", sprintf("%.2f",Stock_PnL), ".\n" ))
cat(paste0("Final PnL: $", sprintf("%.2f",Final_PnL), ".\n" ),
paste0("Option PnL: $", sprintf("%.2f",Option_PnL), ".\n" ),
paste0("Stock PnL: $", sprintf("%.2f",Stock_PnL), ".\n" ))
cat(paste0("Final PnL: $", sprintf("%.2f",Final_PnL), ".\n",
"Option PnL: $", sprintf("%.2f",Option_PnL), ".\n",
"Stock PnL: $", sprintf("%.2f",Stock_PnL), ".\n" ))
cat(paste0("MaxDrawdown: $", sprintf("%.2f",MaxDrawdown), ".\n" ))
cat(paste0("Sharpe Ratio: ", sprintf("%.3f",Sharpe), ".\n" ))
cat(paste0("Sharpe Ratio: ", sprintf("%.3f",Sharpe), ".\n" ))
ggplot(df_opt) +
geom_line(aes(Time_to_Expiry,DoD_PnL, color = "DoD_PnL")) +
geom_line(aes(Time_to_Expiry,Hedging_DoD_PnL, color = "Stock_DoD_PnL")) +
geom_line(aes(Time_to_Expiry,Option_DoD_PnL, color = "Option_DoD_PnL")) +
ggtitle("Daily PnL vs. Time to Expiry (2017/10/31 - 2017/11/29)") +
scale_x_reverse()
ggplot(df_opt) +
geom_line(aes(Time_to_Expiry,Cum_PnL, color = "Cum_PnL")) +
geom_line(aes(Time_to_Expiry,Stock_Cum_PnL, color = "Stock_Cum_PnL")) +
geom_line(aes(Time_to_Expiry,Option_Cum_PnL, color = "Option_Cum_PnL")) +
ggtitle("Cum PnL vs. Time to Expiry (2017/10/31 - 2017/11/29)")+
scale_x_reverse()
ggplot(dfOutput, aes(x = Total_PnL)) +
geom_histogram(aes(y=..density..),
binwidth = 100,
color = "black", fill = "white") +
geom_density(color = "blue") +
geom_vline(aes(xintercept=mean(dfOutput$Total_PnL)), color = "navy", linetype = "dashed", size = 1) +
ggtitle("Distribution of Final PnL, from 2017/01/03 to 2017/10/31")
ggplot(dfOutput, aes(x = Total_PnL)) +
geom_histogram(aes(y=..density..),
binwidth = 100,
color = "black", fill = "white") +
stat_function(fun = dnorm,
args = list(mean = mean(dfOutput$Total_PnL), sd = stdev(dfOutput$Total_PnL)),
color = "red",
size = 2) +
geom_density(color = "blue") +
geom_vline(aes(xintercept=mean(dfOutput$Total_PnL)), color = "navy", linetype = "dashed", size = 1) +
ggtitle("Fitted Normal Distribution of Final PnL, from 2017/01/03 to 2017/10/31")
ggplot(dfOutput) +
geom_density(aes(Total_PnL, fill = "Total_PnL"), alpha = 0.3) +
geom_density(aes(Option_PnL, fill = "Option_PnL"), alpha = 0.3) +
geom_density(aes(Stock_PnL, fill = "Stock_PnL"), alpha = 0.3) +
ggtitle("Distribution of Final PnL, from 2017/01/03 to 2017/10/31")
ggplot(dfOutput, aes(x = MaxDrawdown)) +
geom_histogram(aes(y=..density..),
binwidth = 100,
color = "black", fill = "white") +
geom_density(color = "blue") +
geom_vline(aes(xintercept=mean(dfOutput$MaxDrawdown)), color = "navy", linetype = "dashed", size = 1) +
ggtitle("Distribution of Max Drawdoown, from 2017/01/03 to 2017/10/31")
ggplot(dfOutput, aes(x = Sharpe)) +
geom_histogram(aes(y=..density..),
binwidth = 0.5,
color = "black", fill = "white") +
geom_density(color = "blue") +
geom_vline(aes(xintercept=mean(dfOutput$Sharpe)), color = "navy", linetype = "dashed", size = 1) +
ggtitle("Distribution of Sharpe, from 2017/01/03 to 2017/10/31")
ggplot(dfOutput) +
geom_point(aes(y = Total_PnL, x = date+29)) +
geom_hline(aes(yintercept=mean(dfOutput$Sharpe)), color = "navy", linetype = "dashed", size = 1) +
ggtitle("Scatter - Final PnL vs. Option Expiry Date") +
xlab("Expiry Date")
ggplot(dfOutput) +
geom_point(aes(y = Total_PnL, x = date+29)) +
geom_hline(aes(yintercept=mean(dfOutput$Sharpe)), color = "navy", linetype = "dashed", size = 1) +
geom_line(aes(y = Total_PnL, x = date+29)) +
ggtitle("Line - Final PnL vs. Option Expiry Date") +
xlab("Expiry Date")
ggplot(dfOutput) +
geom_point(aes(y = Total_PnL, x = date+29)) +
geom_hline(aes(yintercept=mean(dfOutput$Sharpe)), color = "navy", linetype = "dashed", size = 1) +
ggtitle("Scatter - Final PnL vs. Option Expiry Date") +
xlab("Expiry Date")
ggplot(dfOutput) +
geom_point(aes(y = Total_PnL, x = date+29)) +
geom_hline(aes(yintercept=mean(dfOutput$Sharpe)), color = "navy", linetype = "dashed", size = 1) +
geom_line(aes(y = Total_PnL, x = date+29)) +
ggtitle("Line - Final PnL vs. Option Expiry Date") +
xlab("Expiry Date")
