as.list(filter(bank, row_number() == 1))
as.list(filter(bank, row_number() == 1))$y <- "yes"
(as.list(filter(bank, row_number() == 1)))$y <- "yes"
(as.list(filter(bank, row_number() == 1)))
x <- (as.list(filter(bank, row_number() == 1)))
x$y <- "yes"
bank[1, , drop = F] <- x
bank[1, , drop = F] <- as.data.frame(x)
bank[1, ] <- as.data.frame(x)
bank[1, ]
bank[1, "y"] <- "yes"
bank[1, "y"] <- "no"
row_nums <- mutate(bank, nnn = 1:n()) %>%
filter(job == "student") %>%
select(nnn) %>%
.$nnn
row_nums
str(bank)
row_nums <- mutate(bank, nnn = 1:n()) %>%
filter(job == "student" & age < 18) %>%
select(nnn) %>%
.$nnn
bank[row_nums, "taxable"] <- "no"
bank
?intersect
setdiff
setdiff(row_nums, 1:nrow(bank))
setdiff(1:nrow(bank), row_nums)
bank1 <- bank
bank1[row_nums, "taxable"] <- "no"
bank1[setdiff(1:nrow(bank), row_nums), "taxable"] <- "yes"
bank1
bank1 <- mutate(bank, taxable = ifelse(job == "student" & age < 18, "no", "yes"))
bank1
filter(bank1, taxable == "no")
distinct(bank, taxable)
distinct(bank1, taxable)
filter(bank, job == "student" & age < 18)
filter(bank, job == "student")
filter(bank, job == "student") %>% select(age)
filter(bank, job == "student") %>% distinct(age)
bank1 <- mutate(bank, taxable = ifelse(job == "student" & age < 22, "no", "yes"))
distinct(bank, taxable)
distinct(bank1, taxable)
count(bank, taxable)
!T
!F
install.packages(c("cowplot", "fBasics", "fExoticOptions", "fOptions", "Matrix", "rmarkdown", "stringi", "tidyverse", "timeDate", "timeSeries"))
install.packages(c("Matrix", "rmarkdown"))
library(fOptions)
library(tidyverse)
install.packages(c("fOptions", "fExoticOptions", "tidyverse"))
library(tidyverse)
install.packages("stringi")
library(tidyverse)
library(fOptions)
library(fOptions)
library(tidyverse)
library(tidyverse)
library(lubridate)
library(bizdays)
library(ggplot2)
shiny::runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
source('~/.active-rstudio-document')
install.packages("ggmap")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('D:/Dropbox/dev/world-map.R', encoding = 'UTF-8')
source('D:/Dropbox/dev/world-map.R', encoding = 'UTF-8')
ggplot() +
geom_polygon(data = map_world, aes(x = long, y = lat, group = group)) +
geom_point(data = alpha_cities, aes(x = long, y = lat), color = 'red')
ggplot() +
geom_polygon(data = map_world, aes(x = long, y = lat, group = group)) +
geom_point(data = alpha_cities, aes(x = long, y = lat), color = 'red') +
#facet_grid(. ~ rating)
#facet_grid(rating ~ .)
facet_wrap(~ rating)
trans <- read.csv("C:/Users/leafy/Downloads/data/trans.asc", sep=";")
View(trans)
ggplot(mutate(trans = substr(trans, 1,2)) + geom_bar(mapping = aes(x = ))
)
substr("930101", 1, 3)
substr("930101", 1, 2)
ggplot() + geom_bar(mapping = aes(x = ))
trans1 < mutate(trans, year = substr(trans,1,2))
trans1 <- mutate(trans, year = substr(trans,1,2))
trans
str(trans)
trans <- as.tibble(trans)
trans1 <- mutate(trans, year = substr(trans,1,2))
trans$year <- substr(date,1,2)
trans$year <- substr(trans$date,1,2)
ggplot(trans) + geom_bar(mapping = aes(x = year))
group_by(trans, year) %>% count()
trans$month <- substr(trans$date,3,4)
ggplot(trans) + geom_bar(mapping = aes(x = sub(date, 1, 4)))
ggplot(trans) + geom_bar(mapping = aes(x = month))
ggplot(trans) + geom_bar(mapping = aes(x = month, color = year))
ggplot(trans) + geom_bar(mapping = aes(x = month, fill = year))
source('D:/Dropbox/Docs/MFE/FE8828/notes/example/ggplot-gridExtra.R')
source('D:/Dropbox/Docs/MFE/FE8828/notes/example/ggplot-gridExtra.R')
web <- "https://marketchameleon.com/Overview/SPY/DailyHistory/"
web
www <- "https://marketchameleon.com/Overview/SPY/DailyHistory/"
www
ibrary(XML)
# Read and parse HTML file
doc.html = htmlTreeParse('http://apiolaza.net/babel.html',
useInternal = TRUE)
lbrary(XML)
doc.html = htmlTreeParse(www,
useInternal = TRUE)
library(XML)
doc.html = htmlTreeParse(www,
useInternal = TRUE)
install.packages("XML")
library(XML)
doc.html = htmlTreeParse(www,
useInternal = TRUE)
install.packages("rCUR")
install.packages("RCurl")
library(rcurl)
library(RCurl)
htmlToText
library(XML)
htmlParse(web)
htmlParse(www)
html <- getURL(www, followinglocation = TRUE)
html <- getURL(www, followlocation = TRUE)
doc <- htmlParse(html, asText = TRUE)
doc
source('D:/Dropbox/Docs/MFE/FE8828/notes/example/biorhythm.r')
source('D:/Dropbox/Docs/MFE/FE8828/notes/example/biorhythm.r')
source('D:/Dropbox/Docs/MFE/FE8828/notes/example/biorhythm.r')
source('D:/Dropbox/Docs/MFE/FE8828/notes/example/biorhythm.r')
biorhythm("1969-09-12", "2017-03-30")
biorhythm("1981-11-03", "2017-03-30")
biorhythm("1957-08-11", Sys.Date())
biorhythm("1971-10-29", Sys.Date())
biorhythm("1971-06-28", Sys.Date())
biorhythm("1964-01-12", Sys.Date())
source('~/.active-rstudio-document')
library(ggplot2)
us_map <- map_data("state")
head(us_map, 3)
us_map %>%
dplyr::filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_path()
us_map %>%
dplyr::filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
theme_void()
us_map %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
theme_void()
library(dplyr)
library(viridis)
cluster::votes.repub %>%
tbl_df() %>%
mutate(state = rownames(votes.repub),
state = tolower(state)) %>%
right_join(us_map, by = c("state" = "region")) %>%
ggplot(aes(x = long, y = lat, group = group, fill = `X1976`)) +
geom_polygon(color = "black") +
theme_void() +
scale_fill_viridis(name = "Republican\nvotes (%)")
## install.packages("ggmap")
library(ggmap)
beijing <- get_map("Beijing", zoom = 12)
ggmap(beijing)
get_map("Baltimore County", zoom = 10,
source = "stamen", maptype = "toner") %>%
ggmap() +
geom_polygon(data = baltimore, aes(x = long, y = lat, group = group),
color = "navy", fill = "lightblue", alpha = 0.2) +
geom_point(data = serial, aes(x = long, y = lat, color = tower)) +
theme_void() +
scale_color_manual(name = "Cell tower", values = c("black", "red"))
cluster::votes.repub %>%
tbl_df() %>%
mutate(state = rownames(votes.repub),
state = tolower(state)) %>%
right_join(us_map, by = c("state" = "region")) %>%
ggplot(aes(x = long, y = lat, group = group, fill = `X1976`)) +
geom_polygon(color = "black") +
theme_void() +
scale_fill_viridis(name = "Republican\nvotes (%)")
get_map("Baltimore County", zoom = 10,
source = "stamen", maptype = "toner") %>%
ggmap() +
geom_polygon(data = baltimore, aes(x = long, y = lat, group = group),
color = "navy", fill = "lightblue", alpha = 0.2) +
geom_point(data = serial, aes(x = long, y = lat, color = tower)) +
theme_void() +
scale_color_manual(name = "Cell tower", values = c("black", "red"))
get_map("Baltimore County", zoom = 10,
source = "stamen", maptype = "toner")
get_map("Baltimore County", zoom = 10,
source = "stamen", maptype = "toner") -> r
r
ggmap(r)
## install.packages("ggmap")
library(ggmap)
beijing <- get_map("Beijing", zoom = 12)
ggmap(beijing)
get_map("Baltimore County", zoom = 10,
source = "stamen", maptype = "toner") %>%
ggmap()
get_map("Baltimore", zoom = 10,
source = "stamen", maptype = "toner") %>%
ggmap()
library(Quandl)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
library(tidyverse)
library(Quandl)
library(xts)
library(dygraphs)
commodityChoices <- c(
"Copper" = "CHRIS/CME_HG1.1", #daily 2017-5-2
"WTI oil" = "FRED/DCOILWTICO.1", # daily 2017-4-24
"Iron Ore" = "ODA/PIORECR_USD", # monthly, 2017-3-31
"Platinum" = "LPPM/PLAT.1", #daily, 2017-5-2
"Palladium" = "LPPM/PALL.1",
"Silver" = "LBMA/SILVER.1") # daily 2017-5
selectInput("commodity",
"Commodity",
choices = commodityChoices,
selected = "Copper")
econIndicatorChoices <- c(
"10-Yr Yield" = "FRED/DGS10", # daily 2017-5
"US CPI" = "RATEINF/INFLATION_USA",# monthly 2017-3
"Japan CPI" = "RATEINF/INFLATION_JPN",
"EU CPI" = "RATEINF/INFLATION_EUR")
selectInput("econIndicator",
"Economic Indicator",
choices = econIndicatorChoices,
selected = "10-yr Yield")
dateRangeInput("dateRange",
"Date range",
start = "1990-01-01",
end   = "2017-03-30")
dateRangeInput("dateRange",
"Date range",
start = "1990-01-01",
end   = "2017-03-30")
ratio_indicator <- reactive({
Quandl.api_key("JyeshGuNBGDbbaYoNURG")
start_date <- format(input$dateRange[1])
end_date <- format(input$dateRange[2])
# Create a vector of 3 data set codes
# 1) commodity chosen by user
# 2) gold quandl code
# 3) economic indicator chosen by user
gold_code <- "CHRIS/CME_GC1.1"
data_set_codes <- c(input$commodity, gold_code, input$econIndicator)
# Pipe the data_set_codes vector to Quandl via the map() function
# Note we can still set the start and end date and object type
# as we always can with Quandl.
quandlData <- data_set_codes  %>%
# Pipe the datasets vector to Quandl via the map() function.
map(Quandl,
start_date = start_date,
end_date = end_date,
collapse = "monthly",
type = "xts") %>%
# Replace all NAs using map() and na.locf().
map(na.locf, formLast = TRUE) %>%
# Merge to one xts object using map() and merge().
reduce(merge) %>%
# Add nicer column names.
`colnames<-`(c(names(commodityChoices[commodityChoices == input$commodity]),
"Gold",
names(econIndicatorChoices[econIndicatorChoices == input$econIndicator])))
# Create a column and add the price ratio.
quandlData$ratio <- quandlData[,1]/quandlData[,2]
# Save just the ratio and the economic indicator data.
ratio_indicator  <- merge(quandlData$ratio, quandlData[,3])
# Add more general names.
colnames(ratio_indicator) <- c("ratio","indicator")
return(ratio_indicator)
})
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
output$ratio_indicator <- renderDygraph({
dygraph(ratio_indicator()) %>%
# Add the rollPeriod for smoothing.
dyRoller(rollPeriod = 3) %>%
# Create two independent axes.
dyAxis("y", label = "USD") %>%
dyAxis("y2", label = "Percent (%)", independentTicks = TRUE) %>%
# Assign each time series to an axis.
dySeries("ratio", axis = 'y',
label = paste(names(commodityChoices[commodityChoices == input$commodity]),
"/Gold (LHS)", sep = ""), color = "blue") %>%
dySeries("indicator", axis = 'y2',
label = paste(names(econIndicatorChoices[econIndicatorChoices == input$econIndicator]),
"(RHS)", sep = ""), color = "red")
})
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dygraphOutput("ratio_indicator")
output$ratio_indicator <- renderDygraph({
dygraph(ratio_indicator()) %>%
# Add the rollPeriod for smoothing.
dyRoller(rollPeriod = 3) %>%
# Create two independent axes.
dyAxis("y", label = "USD") %>%
dyAxis("y2", label = "Percent (%)", independentTicks = TRUE) %>%
# Assign each time series to an axis.
dySeries("ratio", axis = 'y',
label = paste(names(commodityChoices[commodityChoices == input$commodity]),
"/Gold (LHS)", sep = ""), color = "blue") %>%
dySeries("indicator", axis = 'y2',
label = paste(names(econIndicatorChoices[econIndicatorChoices == input$econIndicator]),
"(RHS)", sep = ""), color = "red")
})
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("flexdashboard")
?getSymbols
install.packages("tidyquant")
library("xts", lib.loc="C:/Users/leafy/Downloads/p/R-Portable/App/R-Portable/library")
remove.packages("zoo")
install.packages("tidyquant")
library(tidyquant)
getSymbol
?getSymbols
install.packages("zoo")
?getSymbols
??getSymbols
library(tidyquant)
??getSymbols
?getSymbols
library(Quandl)
install.packages("quandl")
install.packages("Quandl")
install.packages("tidyquant", "Quandl", "fOption", "fExoticOptions")
install.packages("tidyquant", "Quandl", "fOption", "fExoticOptions")
remove.packages("Quandl")
install.packages("tidyquant", "Quandl", "fOption", "fExoticOptions")
install.packages("tidyquant", "Quandl", "fOption", "fExoticOptions")
install.packages("tidyquant", "Quandl", "fOption", "fExoticOptions")
install.packages("tidyquant","fOption", "fExoticOptions")
install.packages("tidyquant","fOption", "fExoticOptions")
install.packages(c("broom", "car", "fBasics", "fOptions", "hms", "Matrix", "Rcpp", "RcppEigen", "stringi"), lib="C:/Users/leafy/Downloads/p/R-Portable/App/R-Portable/library")
install.packages(c("tidyquant", "Quandl", "fOption", "fExoticOptions"))
install.packages(c("tidyquant", "Quandl", "fOptions", "fExoticOptions"))
library(Quandl)
getSymbols('SPY', src = 'av', adjusted = TRUE, output.size = 'full', api.key = "QWM66H05ENYFRDPO")
library(tidyquant)
getSymbols('SPY', src = 'av', adjusted = TRUE, output.size = 'full', api.key = "QWM66H05ENYFRDPO")
getSymbols('SPY', src = 'google', adjusted = TRUE, output.size = 'full')
SPY
View(SPY)
str(SPY)
?getSymbols
token_av <- 'QWM66H05ENYFRDPO'
getSymbols('SPY', src = 'av', adjusted = TRUE, output.size = 'full', api.key = token_av)
token_qd <- 'JyeshGuNBGDbbaYoNURG'
Quandl.api_key(token_qd)
rates <- Quandl(c("EOD/SPY"), start_date="2000-01-01", end_date="2013-06-07" )
rates
Quandl.api_key(token_qd)
rates <- Quandl(c("EOD/V), start_date="2000-01-01", end_date="2013-06-07" )
Quandl.api_key(token_qd)
rates <- Quandl(c("EOD/V"), start_date="2000-01-01", end_date="2013-06-07" )
rates
library(Quandl)					# Quandl package
library(ggplot2)				# Package for plotting
library(tidyverse)				# Package for reshaping data
Quandl.api_key(token_qd)				# Authenticate your token
# Build vector of currencies
rates <- Quandl(c("FRED/DEXUSAL", "FRED/DEXBZUS", "FRED/DEXUSUK", "FRED/DEXCHUS"),start_date="2000-01-01",end_date="2013-06-07" )
meltdf <- gather(rates, key = "CCY", value = "value", -1)
ggplot(meltdf, aes(x = Date, y = value, colour = CCY, group = CCY)) +
geom_line() +
scale_colour_manual(values=1:22)+
ggtitle("Major Currency Exchange Rates in USD") +
theme_minimal()
rates
View(rates)
tail(rates)
rates <- Quandl(c("FRED/DEXUSAL", "FRED/DEXBZUS", "FRED/DEXUSUK", "FRED/DEXCHUS"),start_date="2000-01-01",end_date = "2017-11-30")
View(rates)
tail(rates)
library(Quandl)					# Quandl package
library(ggplot2)				# Package for plotting
library(tidyverse)				# Package for reshaping data
Quandl.api_key(token_qd)				# Authenticate your token
# Build vector of currencies
rates <- Quandl(c("FRED/DEXUSAL", "FRED/DEXBZUS", "FRED/DEXUSUK", "FRED/DEXCHUS"),start_date="2000-01-01",end_date = "2017-11-30")
colnames(rates) <- c("USDAUD", "USDBRL", "USDGBP", "USDCNY")
meltdf <- gather(rates, key = "CCY", value = "value", -1)
ggplot(meltdf, aes(x = Date, y = value, colour = CCY, group = CCY)) +
geom_line() +
scale_colour_manual(values=1:22)+
ggtitle("Major Currency Exchange Rates in USD") +
theme_minimal()
colnames(rates) <- c("Date", "USDAUD", "USDBRL", "USDGBP", "USDCNY")
meltdf <- gather(rates, key = "CCY", value = "value", -1)
ggplot(meltdf, aes(x = Date, y = value, colour = CCY, group = CCY)) +
geom_line() +
scale_colour_manual(values=1:22)+
ggtitle("Major Currency Exchange Rates in USD") +
theme_minimal()
rates <- Quandl(c("FRED/DEXUSAL", "FRED/DEXBZUS", "FRED/DEXUSUK", "FRED/DEXCHUS"),start_date="2000-01-01",end_date = "2017-11-30")
colnames(rates) <- c("Date", "AUD/USD", "USD/BRL", "GBP/USD", "USD/CNY")
meltdf <- gather(rates, key = "CCY", value = "value", -1)
ggplot(meltdf, aes(x = Date, y = value, colour = CCY, group = CCY)) +
geom_line() +
scale_colour_manual(values=1:22)+
ggtitle("Major Currency Exchange Rates in USD") +
theme_minimal()
SPY["2007"]
SPY["2003"]
SPY2003 <- SPY["2003/2007"]
SPY200307 <- SPY["2003-03-01/2007-07-01"]
SPY4<- SPY["/2007-07-01"]
SPY5 <- SPY["2007-07-01/"]
str(SPY)
SPY6 <- SPY["2007-07-01/", "High"]
SPY6 <- SPY["2007-07-01/", "SPY.High"]
SPY6 <- SPY["2007-07-01/", "SPY.High/SPY.Close"]
SPY6 <- SPY["2007-07-01/", c("SPY.High", "SPY.Close")]
View(SPY6)
?Quandl
rates <- Quandl(c("EOD/V"), start_date="2000-01-01", end_date="2013-06-07", type = "xts")
View(rates)
ster(rates)
str(rates)
rates <- Quandl(c("EOD/V"), start_date="2000-01-01", end_date="2013-06-07" )
str(rates)
install.packages(c("tidyquant", "Quandl", "fOptions", "fExoticOptions", "dygraph"))
install.packages(c("tidyquant", "Quandl", "fOptions", "fExoticOptions", "dygraph"))
install.packages(c("dygraph"))
library(shiny); runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
dataChoices <- c("WTI oil" = "FRED/DCOILWTICO", #oil data from Fred
"Copper" = "ODA/PCOPP_USD", # copper data from ODA
"Gold" = "CHRIS/CME_GC1.1",
"Silver" = "LBMA/SILVER.1",
"Copper" = "CHRIS/CME_HG1.1",
"Iron Ore" = "ODA/PIORECR_USD",
"Platinum" = "LPPM/PLAT.1",
"Palladium" = "LPPM/PALL.1") # gold data from CME
dataChoices
match(dataChoices, "FRED/DCOILWTICO")
names(match(dataChoices, "FRED/DCOILWTICO"))
names(dataChoices)[match(dataChoices, "FRED/DCOILWTICO")]
names(dataChoices)[match(dataChoices, "FRED/DCOILWTICO")]
names(dataChoices)[dataChoices == "FRED/DCOILWTICO"]
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-51-quandl.R')
symbol <- c("MSFT", "AAPL")
getSymbols.google(symbol, env = .GlobalEnv, from = "2016-01-01")
library(tidyquant)
symbol <- c("MSFT", "AAPL")
getSymbols.google(symbol, env = .GlobalEnv, from = "2016-01-01")
getSymbols.google(symbol, from = "2016-01-01")
getSymbols(symbol, src = 'google', adjusted = TRUE, from = "2016-01-01")
forecast
library(forecast)
install.packages(c("tidyquant", "Quandl", "fOptions", "fExoticOptions", "dygraph", "forecast"))
install.packages(c("tidyquant", "Quandl", "fOptions", "fExoticOptions", "dygraph", "forecast"))
?Ad
??Ad
library(purrr)
??Ad
?Ad
library(tidyverse)
library(tidyquant)
?Cl
?Ad
sha256
??sha256
library(openssl)
sha256
sha256("!@3")
sha256("!@4")
sha256("123")
install.packages(“openssl”)
install.packages("openssl")
install.packages("openssl")
sha256("1234")
library(openssl)
sha256("1234")
??GBSOption
install.packages(c("backports", "curl", "hunspell", "quantmod", "RcppArmadillo", "reshape2", "Rttf2pt1", "testthat", "yaml"))
install.packages("yaml")
library(shiny); runApp('D:/Dropbox/Docs/MFE/FE8828/2017/Toh Jia Yuan - MFE Assignments/Web Programming/Lesson 1/Toh Jia Yuan_R Assignment 1.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/2017/Toh Jia Yuan - MFE Assignments/Web Programming/Lesson 1/Toh Jia Yuan_R Assignment 1.R')
