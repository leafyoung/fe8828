group_by(bank, age) %>% dplyr::filter(balance == max(balance)) %>% summarize(balance = mean(balance)) %>% head(n = 3)
group_by(bank, age) %>% dplyr::filter(balance == max(balance)) %>% ungroup %>% summarize(balance = mean(balance))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
df %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df
df <- data.frame(throw_dices = 1:10)
df %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(throw_dices = 1:10)
rowwise(df) %>% mutate( mean = mean(sample(1:6, throw_dices, replace = T)))
df <- data.frame(type = sample(c("c", "p"), 100, replace = T),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
df
wfmt <- data_frame(date = seq(from = as.Date("2017-01-01"), by = "day", length.out = 5),
Copper_qty = round(runif(5) * 1000, 0),
Gold_qty = round(runif(5) * 1000, 0),
Silver_qty = round(runif(5) * 1000, 0))
wfmt
library(tidyr)
wfmt %>%
gather(key, value, -date) %>%
group_by(date) %>%
summarize(value1 = sum(value)) %>%
rename(value = value1) %>%
mutate(key = "Total") %>%
spread(key = key, value = value) %>%
inner_join(wfmt, ., by = "date")
wfmt %>% mutate(total = Copper_qty + Gold_qty + Silver_qty)
GBSVolatility(894.75, "c", 1135.67, 240, as.Date("2018-01-19") - as.Date("2017-11-15"), r = 0.01, b = 0)
GBSVolatility(894.75, "c", 1135.67, 240, (as.Date("2018-01-19") - as.Date("2017-11-15"))/365, r = 0.01, b = 0)
GBSVolatility(894.75, "c", 1135.67, 240, as.numeric((as.Date("2018-01-19") - as.Date("2017-11-15")))/365, r = 0.01, b = 0)
GBSVolatility(867.30, "c", 1135.67, 240, as.numeric((as.Date("2018-01-19") - as.Date("2017-11-15")))/365, r = 0.01, b = 0)
GBSVolatility(53.62, "c", 1135.67, 1120.00, as.numeric((as.Date("2018-01-19") - as.Date("2017-11-15")))/365, r = 0.01, b = 0)
53.25 + 53.95
(53.25 + 53.95) / 2
GBSVolatility(894.75, "c", 1135.67, 240, as.numeric((as.Date("2018-01-19") - as.Date("2017-11-15")))/365, r = 0.01, b = 0)
GBSVolatility(867.30, "c", 1135.67, 240, as.numeric((as.Date("2018-01-19") - as.Date("2017-11-15")))/365, r = 0.01, b = 0)
GBSVolatility(256.50, "c", 1135.67, 880.00, as.numeric((as.Date("2018-01-19") - as.Date("2017-11-15")))/365, r = 0.01, b = 0)
source('~/.active-rstudio-document')
y <- rep(0,0)
ii <- seq(from=1/12, to=1/365, by = -(1/365))
for (i in ii) {
x <- GBSGreeks("delta", TypeFlag = "p", S = 3500, X = 3765,  Time = i, r = 0, b = 0, sigma = 0.3)
x <- GBSOption(TypeFlag = "p", S = 3500, X = 3765, Time = i, r = 0, b = 0, sigma = 0.3)@price
y <- c(y, x)
}
plot(ii, y)
plot(ii, y)
ozone
?ozone
plyr::ozone
ozone <- plyr::ozone
install.packages("plyr")
install.packages("plyr")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
install.packages("plyr")
library(tidyverse)
install.packages(c("dendextend", "ggpubr", "openssl"))
library(tidyverse)
library(lubridate)
library(bizdays)
library(fOptions)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = T)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
filter(n()/nrow(bank) > 0.2) %>%
arrange(age)
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
dplyr::filter(n()/nrow(bank) > 0.2) %>%
arrange(age)
# Find the maximum and minimum balance on each age.
bank %>%
group_by(age) %>%
dplyr::filter(min_rank(balance) == 1 | min_rank(desc(balance)) == 1) %>%
arrange(age, balance)
34 %/% 10
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
dplyr::filter(n() == max(n())) %>%
arrange(age)
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
summary(count = n()) %>% arrange(age)
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
summarize(count = n()) %>% arrange(age)
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
summarize(count = n())
nrow(bank)
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
dplyr::filter(n()/nrow(bank) > 0.2) %>%
arrange(age)
# Find the big age group
bank %>%
group_by(age %/% 10) %>%
dplyr::filter(n()/nrow(bank) > 0.2)
# Find the big age group
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarize(count = n()) %>%
dplyr::filter(n()/nrow(bank) > 0.2)
# Find the big age group
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarize(count = n())
1808/4525
# Find the big age group
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarize(count = n()) %>%
dplyr::filter(count/nrow(bank) > 0.2)
# Find the big age group
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarize(count = n()) %>% arrange(age_group)
# Find the maximum and minimum balance on each age.
bank %>%
group_by(age) %>%
dplyr::filter(min_rank(balance) == 1 | min_rank(desc(balance)) == 1) %>%
arrange(age, balance)
# Find the big age group
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
mutate(count = n()) %>%
arrange(age_group)
# Find the big age group
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarise(count = n()) %>%
arrange(age_group)
df %>%
ungroup() %>%
mutate(nnn = 1:n()) %>%
mutate(x = as.Date(x)) %>%
dplyr::filter(is.na(x)) %>%
{ cat(paste0("Wrong dates on: ", .$nnn, collapse = ", ")) }
df <- data.frame(x = c("2017-10-01", "2017-31-12", "2017-03-17", "2017-02-29", "2017-09-30"))
df
df %>%
ungroup() %>%
mutate(nnn = 1:n()) %>%
mutate(x = as.Date(x)) %>%
dplyr::filter(is.na(x)) %>%
{ cat(paste0("Wrong dates on: ", .$nnn, collapse = ", ")) }
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarise(count = n()) %>%
arrange(age_group) -> res
res
plot(res$age_group, res$count)
bank %>%
group_by(age_group = (age %/% 10) * 10) %>%
summarise(count = n()) %>%
arrange(age_group) -> res
res
plot(res)
plot(res)
d2 <- group_by(bank, job) %>% summarise(`balance <= 500` = sum(balance <= 500))
# Generate a report for balance and job
d1 <- group_by(bank, job) %>% summarise(`balance > 500` = sum(balance > 500))
d2 <- group_by(bank, job) %>% summarise(`balance <= 500` = sum(balance <= 500))
# d collects all jobs
d <- distinct(bank, job) %>% arrange(job)
d <- left_join(d, d1, by = "job")
d <- left_join(d, d2, by = "job")
d <- mutate(d, total = `balance > 500` + `balance <= 500`)
d
nrow(d1)
nrow(d2)
?summarize
library(tidyverse)
library(tidyverse)
library(lubridate)
library(bizdays)
library(fOptions)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = T)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
library(fOptions)
library(tidyverse)
library(lubridate)
# Generate a report for balance and job
d1 <- group_by(bank, job) %>% summarise(`balance>500` = sum(balance > 500))
d2 <- group_by(bank, job) %>% summarise(`balance<=500` = sum(balance <= 500))
# d collects all jobs, in case some jobs is missing from d1 or d2
d <- distinct(bank, job) %>% arrange(job)
d <- left_join(d, d1, by = "job")
d <- left_join(d, d2, by = "job")
d <- mutate(d, total = `balance > 500` + `balance <= 500`)
# Generate a report for balance and job
d1 <- group_by(bank, job) %>% summarise(`balance>500` = sum(balance > 500))
d2 <- group_by(bank, job) %>% summarise(`balance<=500` = sum(balance <= 500))
# d collects all jobs, in case some jobs is missing from d1 or d2
d <- distinct(bank, job) %>% arrange(job)
d <- left_join(d, d1, by = "job")
d <- left_join(d, d2, by = "job")
d <- mutate(d, total = `balance>500` + `balance<=500`)
d
# mutate with group_by
group_by(data.frame(a = 1:10), quartile = ntile(a, 2)) %>%
mutate(b = a / sum(a))
# although this works...
# No hard coding of column names "Copper_qty Gold_qty Silver_qty".
wfmt %>% mutate(total = Copper_qty + Gold_qty + Silver_qty)
d1 <- filter(bank, month == "sep") %>%
summarize(duration = mean(duration)) %>%
rename(`Duration Sep` = duration)
d1 <- filter(bank, month == "sep") %>%
summarize(duration = mean(duration)) %>%
rename(`Duration Sep` = duration)
d1 <- filter(bank, month == "sep") %>%
summarize(duration = mean(duration)) %>%
rename(`Duration Sep` = duration)
filter(bank, month == "sep")
dplyr::filter(bank, month == "sep")
library(tidyverse)
dplyr::filter(bank, month == "sep")
filter(bank, month == "sep")
library(shiny); runApp('example/shiny-31-kable-observe.R')
runApp('example/shiny-31-kable-observe.R')
runApp('example/shiny-31-kable-observe.R')
runApp('example/shiny-32-renderUI.R')
iris
str(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_line()
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_line()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Panel.Width)) + geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Petal.Width)) + geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Petal.Width)) + geom_point() + geom_smooth()
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runif()
?runif
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-32-renderUI.R')
runApp('example/shiny-33-reactiveValues.R')
runApp('example/shiny-33-reactiveValues.R')
runApp('example/shiny-33-reactiveValues.R')
runApp('example/shiny-33-reactiveValues.R')
runApp('example/shiny-33-reactiveValues.R')
runApp('example/shiny-33-reactiveValues.R')
runApp('example/shiny-32-renderUI.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-34-renderUI.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-35-renderUI-2.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
runApp('example/shiny-36-update.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
bank
ggplot(bank) + geom_bar(mapping = aes(x = age, fill = job), position = "fill") + coord_flip()
ggplot(bank) + geom_bar(mapping = aes(x = age, fill = job), position = "fill") + coord_polar()
ggplot(bank) + geom_bar(mapping = aes(x = age, fill = education), position = "fill") + coord_polar()
grid.arrange(p1, p2, ncol=2, nrow=1)
p1 <- ggplot(bank) + geom_bar(mapping = aes(x = age, fill = job), position = "fill") + coord_polar()
p2 <- ggplot(bank) + geom_bar(mapping = aes(x = age, fill = education), position = "fill") + coord_polar()
grid.arrange(p1, p2, ncol=2, nrow=1)
grid.arrange(p1, p2, ncol=2, nrow=1, width = c(4,2))
grid.arrange(p1, p2, ncol=2, nrow=1)
grid.arrange(p1, p2, ncol=2, nrow=1, width = c(4,2))
grid.arrange(p1, p2, ncol=2, nrow=1, width = c(1.5,0,5))
grid.arrange(p1, p2, ncol=2, nrow=1, width = c(0.5,0.25))
grid.arrange(p1, p2, ncol=2, nrow=1, width = c(0.5,0.25), heights =c(1))
grid.arrange(p1, p2, ncol=2, nrow=1, width = c(1), heights =c(1))
grid.arrange(p1, p2, ncol=2, nrow=1, width = 1, heights = 1)
grid.arrange(p1, p2, ncol=2, nrow=1, widths = 1, heights = 1)
grid.arrange(p1, p2, ncol=2, nrow=1, widths = c(4,2))
grid.arrange(p1, p2, ncol=1, nrow=2, heights = c(4,2))
library(fOptions)
library(tidyverse)
library(lubridate)
library(bizdays)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = T)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
install.packages("maps")
# install.packages("maps")
library("maps")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
world <- map_data("world")
ggplot(world, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
library(gridExtra)
p1 <- ggplot(bank) + geom_bar(mapping = aes(x = age, fill = job), position = "fill") + coord_polar()
p2 <- ggplot(bank) + geom_bar(mapping = aes(x = age, fill = education), position = "fill") + coord_polar()
grid.arrange(p1, p2, ncol=2, nrow=1)
grid.arrange(p1, p2, ncol=2, nrow=1)
grid.arrange(p1, p2, ncol=2, nrow=1, widths = c(4,2))
grid.arrange(p1, p2, ncol=1, nrow=2, heights = c(4,2))
source('~/.active-rstudio-document', echo=TRUE)
library(tibble)
library(ggplot2)
library(gridExtra)
df <- tibble(x = rnorm(1000), y = rnorm(1000))
hist_top <- ggplot(df, aes(x = x)) + geom_density()
empty <-
ggplot()+geom_point(aes(1,1), colour="white")+
theme(axis.ticks=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank())
scatter <- ggplot(df, aes(x = x, y = y)) + geom_point()
hist_right <- ggplot(df, aes(x = y)) + geom_density() + coord_flip()
grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(4, 2), heights=c(1, 4))
grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(4, 0.5), heights=c(1, 4))
grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(3.5, 0.5), heights=c(1, 4))
grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(3.5, 0.7), heights=c(1, 4))
qplot(age, balance, data = bank)
ggplot(bank, aes(age, balance)) + geom_point()
ggplot(bank, aes(age, balance, color = job)) + geom_point()
ggplot(bank, aes(default, age)) + geom_point()
ggplot(df, aes(x, y)) + geom_point()
df <- tibble(x = rnorm(1000), y = rnorm(1000))
ggplot(df, aes(x, y)) + geom_point()
sample(1:1000, 1000)
str(sample(1:1000, 1000))
str(sample(1:1000, 10))
str(sample(1:1000, 100))
ggplot(df, aes(x, y)) + geom_point() + geom_point(df[sample(1:1000, 100)),,drop = F], aes(color = "red"))
ggplot(df, aes(x, y)) + geom_point() + geom_point(df[sample(1:1000, 100)),,drop = F], aes(color = "red")
ggplot(df, aes(x, y)) + geom_point() + geom_point(df[sample(1:1000, 100),,drop = F], aes(color = "red"))
ggplot(df, aes(x, y)) + geom_point() + geom_point(data = df[sample(1:1000, 100),,drop = F], aes(color = "red"))
ggplot(df, aes(x, y)) +
geom_point() +
geom_point(data = sqrt(df[sample(1:1000, 100),,drop = F]), aes(color = "red"))
ggplot(df, aes(x, y)) +
geom_point() +
geom_point(data = sqrt(abs(df[sample(1:1000, 100),,drop = F])), aes(color = "red"))
ggplot(df, aes(x, y)) +
geom_jitter() +
geom_point(data = sqrt(abs(df[sample(1:1000, 100),,drop = F])), aes(color = "red"))
ggplot(df, aes(x, y)) +
geom_point() +
geom_point(data = sqrt(abs(df[sample(1:1000, 100),,drop = F])), aes(color = "red"))
ggplot(bank, aes(default, age)) + geom_point()
qplot(age, default, data = bank)
qplot(default, age, bank)
qplot(default, age, data = bank)
?qplot
ggplot(bank, aes_string("age", "balance", color = "job")) + geom_point()
ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
ggplot(bank, aes(duration, fill = job) + geom_density()
)
ggplot(bank, aes(balance, fill = job)) + geom_density()
ggplot(bank, aes(age, fill = job) + geom_density()
)
ggplot(bank, aes(age, fill = job)) + geom_density()
ggplot(bank, aes(age, fill = job, alpha = 0.7)) + geom_density()
ggplot(bank, aes(age, fill = job, alpha = 0.4)) + geom_density()
ggplot(bank, aes(age, fill = job, alpha = 0.3)) + geom_density()
ggplot(bank, aes(age, color = job, alpha = 0.3)) + geom_density()
ggplot(bank, aes(balance, color = job)) + geom_density()
ggplot(bank, aes(duration, fill = job)) + geom_density()
ggplot(bank, aes(age, color = job, fill = job, alpha = 0.3)) + geom_density()
g <- ggplot(bank, aes(x = age, y = duration))
g
g <- ggplot(bank)
g
g <- ggplot()
g
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
qplot(age, job, data = bank, color = loan, shape = loan)
ggplot(bank, aes(age, job, color = loan, shape = loan)) + geom_point()
ggplot(bank, aes(age, job, color = loan, size = loan)) + geom_point()
qplot(previous, data = bank, facets = . ~ job, binwidth = 2)
qplot(previous, data = bank, facets = . ~ marrital, binwidth = 2)
qplot(previous, data = bank, facets = . ~ marrital)
qplot(previous, data = bank, facets = . ~ job)
qplot(previous, data = bank, facets = . ~ marrital, binwidth = 2)
colnames(bank)
qplot(previous, data = bank, facets = . ~ marital, binwidth = 2)
qplot(previous, data = bank, facets = . ~ job, binwidth = 2)
cutpoints <- quantile(bank$age, seq(0, 1, length = 4), na.rm = TRUE)
# The age_group variable is now a categorical factor variable containing 3 levels, indicating the ranges of age.
bank$age_group <- cut(bank$age, cutpoints)
levels(bank$age_group)
g <- ggplot(bank, aes(age, duration)) +
geom_point(alpha = 1/3) +
facet_wrap(job ~ age_group, ncol = 3) + # ncol = number of cuts 3 = length(levels(bank$age_group))
geom_smooth(method="lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Avenir", base_size = 10) +
labs(x = "age", y = expression("log " * Duration)) +
labs(title = "Bank Clients")
g
str(g)
g
g
ggplot(bank, aes(age, balance, shape = marital, color = marital)) + geom_smooth()
ggplot(bank, aes(age, balance, shape = marital, color = marital)) + geom_point() + geom_smooth()
ggplot(bank, aes(age, balance, shape = job, color = marital)) + geom_point() + geom_smooth()
ggplot(bank, aes(job, duration)) + geom_boxplot()
ggplot(bank, aes(job, age)) + geom_boxplot()
qplot(pdays, data = bank, facets = job ~ ., binwidth = 2) # doesn't look great because we have so many jobs.
ggplot(bank, aes(pdays)) + facet_grid(job ~ .)
ggplot(bank, aes(pdays)) + facet_grid(job ~ .) + geom_histogram()
ggplot(bank, aes(pdays)) + facet_grid(job ~ .) + geom_histogram(binwidth = 2)
ggplot(bank, aes(pdays)) + facet_grid(job ~ .) + geom_histogram()
ggplot(bank, aes(pdays)) + geom_histogram() + facet_wrap(job ~ .)
ggplot(bank, aes(pdays)) + geom_histogram() + facet_wrap(job ~ ., ncol = 3)
ggplot(bank, aes(pdays)) + geom_histogram() + facet_grid(job ~ ., ncol = 3)
ggplot(bank, aes(pdays)) + geom_histogram() + facet_grid(job ~ .)
ggplot(bank, aes(pdays)) + geom_histogram() + facet_grid(. ~ job)
qplot(campaign, data = bank, facets = . ~ job, binwidth = 2)
qplot(balance, age, data = bank, facets = . ~ job)
ggplot(bank, aes(balance, age, color = job)) + geom_histogram() + facet_grid(. ~ job)
ggplot(bank, aes(balance, age, color = job)) + geom_histogram() + facet_grid(. ~ job)
ggplot(bank, aes(balance, age)) + geom_histogram() + facet_grid(. ~ job, color = job)
ggplot(bank, aes(balance, age)) + geom_histogram() + facet_grid(. ~ job)
ggplot(bank, aes(balance, age)) + geom_point() + facet_grid(. ~ job, color = job)
ggplot(bank, aes(balance, age)) + geom_point(aes(color = job)) + facet_grid(. ~ job)
ggplot(bank) +
geom_smooth(aes(x = age, y = duration)) +
geom_point(aes(x = age, y = duration))
