labs(x = "age", y = expression("log " * Duration))
g + geom_point(aes(color = job), size = job, alpha = 1/2) + theme_minimal() +
labs(title = "Duration is longer with age",
subtitle = "some random plot",
caption = "from MFE") +
labs(x = "age", y = expression("log " * Duration))
g + geom_point(aes(color = job, size = job), alpha = 1/2) + theme_minimal() +
labs(title = "Duration is longer with age",
subtitle = "some random plot",
caption = "from MFE") +
labs(x = "age", y = expression("log " * Duration))
g + geom_point(aes(color = job, size = job), alpha = 1/2) + theme_minimal() +
labs(title = "Duration is longer with age",
subtitle = "some random plot",
caption = "from MFE") +
labs(x = "age", y = expression("log " * Duration)) + theme_hc()
g + geom_point(aes(color = job), size = 4, alpha = 1/2) + theme_minimal() +
labs(title = "Duration is longer with age",
subtitle = "some random plot",
caption = "from MFE") +
labs(x = "age", y = expression("log " * Duration))
mtcars[1:10, , drop = F] %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
font_size = 12,
full_width = F, # True for left-to-right width
position = "left") # if full_width == F
vol_surface <- tibble(tenor = c("1M", "2M", "3M", "6M"),
`0.1` = c(0.472, 0.435, 0.391, 0.29)
`0.25` = c(0.431, 0.41, 0.337, 0.28)
`0.5` = c(0.398, 0.30, 0.251, 0.2)
`0.75` = c(0.428, 0.336, 0.307, 0.249)
`0.9` = c(0.457, 0.411, 0.391, 0.278))
vol_surface <- tibble(tenor = c("1M", "2M", "3M", "6M"),
`0.1` = c(0.472, 0.435, 0.391, 0.29),
`0.25` = c(0.431, 0.41, 0.337, 0.28),
`0.5` = c(0.398, 0.30, 0.251, 0.2),
`0.75` = c(0.428, 0.336, 0.307, 0.249),
`0.9` = c(0.457, 0.411, 0.391, 0.278))
library(tidyverse)
vol_surface <- tibble(tenor = c("1M", "2M", "3M", "6M"),
`0.1` = c(0.472, 0.435, 0.391, 0.29),
`0.25` = c(0.431, 0.41, 0.337, 0.28),
`0.5` = c(0.398, 0.30, 0.251, 0.2),
`0.75` = c(0.428, 0.336, 0.307, 0.249),
`0.9` = c(0.457, 0.411, 0.391, 0.278))
vol_surface
gather(vol_surface, -tenor)
gather(vol_surface, key = "delta", value = "vol", -tenor)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))
)
library(kableExtra)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1)))
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))) %>% View
library(kableExtra)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))) %>%
spread(key = "delta", value = "vol")
library(kableExtra)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))) %>%
spread(key = "delta", value = "vol") %>% View
library(kableExtra)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))) %>%
spread(key = "delta", value = "vol") %>%
kable("html", escape = F, align = "c") %>%
kable_styling("striped", full_width = F)
library(knitr)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))) %>%
spread(key = "delta", value = "vol") %>%
kable("html", escape = F, align = "c") %>%
kable_styling("striped", full_width = F)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(1:10, begin = 0.5, end = 0.9, option = "C", direction = -1))) %>%
spread(key = "delta", value = "vol") %>%
kable("html", escape = F, align = "c") %>%
kable_styling("striped", full_width = F)
source('~/.active-rstudio-document', echo=TRUE)
library(fOptions)
library(tidyverse)
library(lubridate)
library(bizdays)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(maps)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = T)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
ggplot(bank) +
geom_bar(mapping = aes(x = age, fill = job), position = "fill") +
coord_flip() +
ggplot(bank) +
geom_bar(mapping = aes(x = age, fill = job), position = "fill") +
coord_flip()
ggplot(bank) +
geom_bar(mapping = aes(x = age, fill = job), position = "fill") +
coord_flip()
source('~/.active-rstudio-document', echo=TRUE)
library(shiny); runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
input$
scenarios_1
names(input)
str(input)
input$shock
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
a <- NULL
a[1]
a[2]
a <- c(1)
a[2]
a[3]
a[1]
a <- NA
a[1]
a[2]
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/shiny-37-createDynamic.R')
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(~ education, nrow = 2)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(. ~ education, nrow = 2)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
# facet_wrap(~ education, nrow = 2)
facet_grid(~ education, nrow = 2)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
# facet_wrap(~ education, nrow = 2)
facet_grid(~ education)
library(fOptions)
library(tidyverse)
library(lubridate)
library(bizdays)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(maps)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = T)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
# If just want to use
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(loan ~ education, nrow = 2)
# If just want to use
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
# facet_wrap(loan ~ education, nrow = 2)
facet_grid(loan ~ education)
# If just want to use
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
# facet_wrap(loan ~ education, nrow = 2)
facet_grid(loan ~ education ~ pdays)
View(bank)
# If just want to use
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
# facet_wrap(loan ~ education, nrow = 2)
facet_grid(loan ~ education ~ housing)
# If just want to use
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(loan ~ education ~ housing, nrow = 2)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(~ education, nrow = 3)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(~ education, nrow = 1)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_grid( ~ education)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_grid( ~ education)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(~ education, nrow = 2)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_grid( ~ education)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(loan ~ education ~ housing, nrow = 2)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_grid( ~ education)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_wrap(~ education, nrow = 2)
library(fOptions)
library(tidyverse)
library(lubridate)
library(bizdays)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(maps)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = TRUE)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
knitr::include_graphics("imgs/ggplot2-10.png")
knitr::include_graphics("imgs/main-qimg-bf859b506013fd60589a28be4c3f9e47.png")
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
knitr::include_graphics("imgs/ggplot2-basics.png")
p1 <- ggplot(bank, aes(age, balance)) + geom_point()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point()
grid.arrange(p1, p2, ncol = 2, widths = c(1.5,2))
ggplot(bank, aes(default, age)) + geom_point()
ggplot(bank, aes(age, default)) + geom_point()
ggplot(bank, aes(job, age)) + geom_point()
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.5,2))
ggplot(bank, aes(x = age, y = duration)) +
geom_smooth() +
geom_point()
# This is equivalent to below
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(aes(x = age, y = duration))
# But we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = filter(bank, age > median(age)), aes(x = age, y = duration), color = "green") +
geom_smooth(data = filter(bank, age <= median(age)), aes(x = age, y = duration), color = "red")
library(fOptions)
library(tidyverse)
library(lubridate)
library(bizdays)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(maps)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = FALSE, fig.align="center", collapse = TRUE, cache = TRUE)
chunk <- "```"
inline <- function(x = "") paste0("`` `r ", x, "` ``")
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
knitr::include_graphics("imgs/ggplot2-10.png")
knitr::include_graphics("imgs/main-qimg-bf859b506013fd60589a28be4c3f9e47.png")
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
knitr::include_graphics("imgs/ggplot2-basics.png")
p1 <- ggplot(bank, aes(age, balance)) + geom_point()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point()
grid.arrange(p1, p2, ncol = 2, widths = c(1.5,2))
ggplot(bank, aes(default, age)) + geom_point()
ggplot(bank, aes(age, default)) + geom_point()
ggplot(bank, aes(job, age)) + geom_point()
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.5,2))
ggplot(bank, aes(x = age, y = duration)) +
geom_smooth() +
geom_point()
# This is equivalent to below
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(aes(x = age, y = duration))
# But we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = filter(bank, age > median(age)), aes(x = age, y = duration), color = "green") +
geom_smooth(data = filter(bank, age <= median(age)), aes(x = age, y = duration), color = "red")
# But we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = filter(bank, age > median(age)), aes(x = age, y = duration), color = "green") +
geom_smooth(data = filter(bank, age <= median(age)), aes(x = age, y = duration), color = "red")
filter(bank, age > median(age))
library(tidyverse)
library(dplyr)
source('~/.active-rstudio-document', echo=TRUE)
# But we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, age > median(age)), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, age <= median(age)), aes(x = age, y = duration), color = "red")
# But we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, age > median(age)), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, age <= median(age)), aes(x = age, y = duration), color = "red")
grid.arrange(p1, p2, ncol = 2, widths = c(1.5,2))
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.5,2))
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.3,2))
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.35,2))
# But we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, age > median(age)), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, age <= median(age)), aes(x = age, y = duration), color = "red")
# adjust legend position
ggplot(bank, aes(x = age, y = duration, color = job)) +
geom_point() +
theme(legend.position="bottom")
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.35,2))
p1 <- ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
p2 <- ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
grid.arrange(p1, p2, ncol = 2, widths = c(1.35,2))
bank
View(bank
)
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "management"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job != "management"), aes(x = age, y = duration), color = "red")
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"), aes(x = age, y = duration), color = "red")
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job == "blue-collar"), aes(x = age, y = duration), color = "blue") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"), aes(x = age, y = duration), color = "red")
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job == "blue-collar"), aes(x = age, y = duration), color = "blue") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"), aes(x = age, y = duration), color = "grey")
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job == "blue-collar"), aes(x = age, y = duration), color = "purple") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"), aes(x = age, y = duration), color = "blue")
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job == "blue-collar"), aes(x = age, y = duration), color = "blue") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"), aes(x = age, y = duration), color = "yellow")
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"), aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job == "blue-collar"), aes(x = age, y = duration), color = "blue") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"), aes(x = age, y = duration), color = "orange")
```{r, echo = F}
# Nearly empty chart.
g1 <- ggplot(bank, aes(x = age, y = duration))
g2 <- ggplot(bank)
g3 <- ggplot()
grid.arrange(g1, g2, g3, ncol = 3)
g2 <- ggplot(bank)
# Nearly empty chart.
g1 <- ggplot(bank, aes(x = age, y = duration))
g2 <- ggplot(bank)
grid.arrange(g1, g2, g3, ncol = 3)
p1 <- ggplot(bank) + geom_bar(mapping = aes(x = job))
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p1, p2, ncol = 2, widths = c(1.35, 2))
p1 <- ggplot(bank) + geom_bar(mapping = aes(x = job))
p2 <- gplot(bank) + geom_bar(mapping = aes(x = job, fill = age))
grid.arrange(p1, p2, ncol = 2, widths = c(1.35, 2))
p1 <- ggplot(bank) + geom_bar(mapping = aes(x = job))
p2 <- ggplot(bank) + geom_bar(mapping = aes(x = job, fill = age))
p1 <- ggplot(bank) + geom_bar(mapping = aes(x = job))
p2 <- ggplot(bank) + geom_bar(mapping = aes(x = job, fill = age))
grid.arrange(p1, p2, ncol = 2, widths = c(1.35, 2))
p2 <- ggplot(bank) + geom_bar(mapping = aes(x = job, fill = age))
grid.arrange(p1, p2, ncol = 2, widths = c(2, 2))
```{r, echo = T, out.height=4}
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_grid( ~ education)
ggplot(data = bank) +
geom_point(mapping = aes(x = age, y = duration)) +
facet_grid( ~ education)
vol_surface <- tibble(tenor = c("1M", "2M", "3M", "6M"),
`0.1` = c(0.472, 0.435, 0.391, 0.29),
`0.25` = c(0.431, 0.41, 0.337, 0.28),
`0.5` = c(0.398, 0.30, 0.251, 0.2),
`0.75` = c(0.428, 0.336, 0.307, 0.249),
`0.9` = c(0.457, 0.411, 0.391, 0.278))
# Coloring for volatility surface:
# Include all cells for colors, using gather, cell_spec, then spread
library(knitr)
gather(vol_surface, key = "delta", value = "vol", -tenor) %>%
# cell_spec takes column vol. spec_color also takes column vol values into consideration.
# We take half of the spectrurm - yellow to red.
# Color specturm: "magma" (or "A"), "inferno" (or "B"),
# "plasma" (or "C"), and "viridis" (or "D", the default option).
mutate(vol = cell_spec(
vol, "html", color = "black", bold = T,
background = spec_color(vol, begin = 0.5, end = 1,
option = "A", direction = -1))) %>%
spread(key = "delta", value = "vol") %>%
kable("html", escape = F, align = "c") %>%
kable_styling("striped", full_width = F)
ggplot(data = bank, mapping = aes(x = job, fill = education)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# But repeating is useful sometimes.
# we can do specify different data and aes for different geom_* functions.
ggplot(bank) +
geom_point(aes(x = age, y = duration)) +
geom_smooth(data = dplyr::filter(bank, job == "entrepreneur"),
aes(x = age, y = duration), color = "green") +
geom_smooth(data = dplyr::filter(bank, job == "blue-collar"),
aes(x = age, y = duration), color = "blue") +
geom_smooth(data = dplyr::filter(bank, job != "entrepreneur"),
aes(x = age, y = duration), color = "orange")
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
install.packages("shinydashboard")
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
install.packages("highcharter")
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
inflation <- read_excel("inflation.xls")
inflation <- read_excel("D:\\Dropbox\\Docs\\MFE\\FE8828\\notes\\example\\dashboard\\inflation.xls")
View(inflation)
runApp('D:/Dropbox/Docs/MFE/FE8828/notes/example/dashboard')
setwd("D:\\Dropbox\\Docs\\MFE\\FE8828\\notes\\example\\dashboard")
inflation <- read_excel("inflation.xls")
View(inflation)
year<-c(1980:2022) #making a vector consisting of all years
year<-as.character(year)#converting to character type to use in gather()
#converting dataset to a long format
inf <- gather(year,key = "Year",value="InflationRate")
year
#converting dataset to a long format
inf <- gather(inflation, key = "Year",value="InflationRate")
inf
View(inf)
#converting dataset to a long format
inf <- gather(inflation, key = "Year",value="InflationRate", -1)
View(inf)
inf <- na.omit(inf) #omitting NA values
names(inf) <- c("region","year","inflation")
inf$year<- as.integer(inf$year)
India <- filter(inf,region=="India")
India$inflation<-as.numeric(India$inflation)
inf
India <- filter(inf,region=="India")
dplyr::filter(inf,region=="India")
