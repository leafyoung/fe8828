}
print(winner)
help(rep)
winner <- rep(0, 1000)
winner
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- c"A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(winner)
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(winner)
for(i in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print("Prob of B winning with ", i, " goals scored: ", sum(winner=="B")/1000)
}
for(i in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", i, " goals scored: ", sum(winner=="B")/1000))
}
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000)
for (i in 1:1000) {
temp <- sample(c("A", "B"), 4, replace = T, prob = c(0.67, 0.33))
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000) #initializes result matrix for 1000 matches
for (i in 1:1000) {
temp <- sample(c("A", "B"), j, replace = T, prob = c(0.67, 0.33)) #samples 1000 mathes with j goals scored
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000) #initializes result matrix for 1000 matches
for (i in 1:1000) {
temp <- sample(c("A", "B"), j, replace = T, prob = c(0.67, 0.33)) #samples 1000 mathes with j goals scored
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000) #initializes result matrix for 1000 matches
for (i in 1:1000) {
temp <- sample(c("A", "B"), j, replace = T, prob = c(0.67, 0.33)) #samples 1000 mathes with j goals scored
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
print("Prob of B winning with 0 goals scored : 0")
for(j in 1:4){
winner <- rep(0, 1000) #initializes result matrix for 1000 matches
for (i in 1:1000) {
temp <- sample(c("A", "B"), j, replace = T, prob = c(0.67, 0.33)) #samples 1000 mathes with j goals scored
if(sum(temp=="A") - sum(temp=="B") > 0){
winner[i] <- "A"
}
else if(sum(temp=="A") - sum(temp=="B") < 0){
winner[i] <- "B"
}
else{
winner[i] <- "DRAW"
}
}
print(paste0("Prob of B winning with ", j, " goals scored: ", sum(winner=="B")/1000))
}
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[x('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
rm()
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[c('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[c('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[c('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[c('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[c('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnc, from = "2017-01-01", to = "2017-12-31")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnv, from = "2017-01-01", to = "2017-12-31")
if (!require("quantmod")) {install.packages("quantmod")}
library("quantmod")
symbol <- c("MSFT", "AAPL")
getSymbols.yahoo(symbol, env = .GlobalEnv, from = "2017-01-01", to = "2017-12-31")
dates <- index(MSFT[c('2017')])
MSFT.2017 <- as.numeric(MSFT[c('2017')]$MSFT.Close)
AAPL.2017 <- as.numeric(AAPL[c('2017')]$AAPL.Close)
MSFT.2017
MSFT
temp <- MSFT.2017[-len(MSFT.2017)] - MSFT.2017
temp <- MSFT.2017[-length(MSFT.2017)] - MSFT.2017
temp <- MSFT.2017[-1] - MSFT.2017[-length(MSFT.2017)]
temp
MSFT.2017
sum(temp>=0)
temp>=0
temp==00
temp==0
sum(temp==0)
0 & 1
0 && 1
day_change_MSFT <- MSFT.2017[-1] - MSFT.2017[-length(MSFT.2017)]
day_change_AAPL <- AAPL.2017[-1] - AAPL.2017[-length(AAPL.2017)]
print(sum((day_change_AAPL>0) & (day_change_MSFT<0)))
print(sum(day_change_MSFT>0)) # number of days with increase the next day for MSFT
print(sum(day_change_MSFT<0)) # number of days with decrease the next day for MSFT
print(sum(day_change_MSFT==0))# number of days with no change the next day for MSFT
MSFT.2017.open <- as.numeric(MSFT[c('2017')]$MSFT.Open)
profit <- MSFT.2017[-1] - MSFT.2017.open[-length(MSFT.2017.open)]
profit
plot(profit)
help [plot]
help(plot)
MSFT
MSFT[[1]]
MSFT[, 1]
MSFT[1]
MSFT[, 1]
MSFT[0]
MSFT[ ,0]
Dates <- MSFT[ ,0]
plot(Dates, profit)
plot(Dates[-1], profit)
Dates
as.Date(Dates)
Dates <- as.Date(Dates)
Dates <- as.Date.default(MSFT[ ,0])
Dates <- as.numeric(MSFT[ ,0])
Dates
Dates <- as.Date.ts(MSFT[ ,0])
Dates <- as.Date(MSFT[ ,0])
Dates <- MSFT[ ,0]
class(Dates)
Dates
str(Dates)
profit <- MSFT.2017[-1] - MSFT.2017.open[-length(MSFT.2017.open)]
plot(profit)
AAPL.2017
for(i in 1:(length(AAPL.2017)-10)){
ma_AAPL[i] <- AAPL.2017[i:(i+9)]/10
}
length(AAPL.2017)
ma_AAPL <- rep(0, 241)
for(i in 1:(length(AAPL.2017)-10)){
ma_AAPL[i] <- AAPL.2017[i:(i+9)]/10
}
warnings()
AAPL.2017[1:10]
sum(AAPL.2017[1:10])
ma_AAPL <- rep(0, 241)
for(i in 1:(length(AAPL.2017)-10)){
ma_AAPL[i] <- sum(AAPL.2017[i:(i+9)])/10
}
ma_AAPL
ma_AAPL <- rep(0, length(AAPL.2017)-10)
for(i in 1:(length(AAPL.2017)-10)){
ma_AAPL[i] <- sum(AAPL.2017[i:(i+9)])/10
}
ma_AAPL
length(AAPL.2017)
length(ma_AAPL)
AAPL.2017[1:15]
AAPL.2017[-(1:15)]
AAPL.2017[-(1:10)]
sum((AAPL.2017[-(1:10)] - ma_AAPL)>0)
above_ma_AAPL <- sum((AAPL.2017[-(1:10)] - ma_AAPL)>0)
above_ma_AAPL
diff <- AAPL.2017[-(1:10)] - ma_AAPL
diff>0
sum(diff>0)
is_above_ma_AAPL <- AAPL.2017[-(1:10)] - ma_AAPL>0
is_above_ma_AAPL
is_above_ma_AAPL[1]
is_above_ma_AAPL[1] & is_above_ma_AAPL[2]
AAPL.2017.open <- as.numeric(AAPL[c('2017')]$AAPL.Open)
no_of_AAPL_stocks <- 0
is_above_ma_AAPL <- AAPL.2017[-(1:10)] - ma_AAPL>0
no_of_AAPL_stocks <- 0
for(i in length(is_above_ma_AAPL)-2){
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
}
no_of_AAPL_stocks
length(is_above_ma_AAPL)-2
is_above_ma_AAPL[1] & is_above_ma_AAPL[2]
if(TRUE){}
if(TRUE){
print("HI")
}
if(is_above_ma_AAPL[1] & is_above_ma_AAPL[2]){
print("YES")
}
for(i in (length(is_above_ma_AAPL)-2)){
if(is_above_ma_AAPL[1] & is_above_ma_AAPL[2]){
print("YES")
}
}
for(i in (length(is_above_ma_AAPL)-2)){
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
print("YES")
}
}
no_of_AAPL_stocks <- 0
for(i in (length(is_above_ma_AAPL)-2)){
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
}
no_of_AAPL_stocks
for(i in (length(is_above_ma_AAPL)-2)){
print(paste0("Iteration", i))
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
no_of_AAPL_stocks <- 0
for(i in 1:(length(is_above_ma_AAPL)-2)){
print(paste0("Iteration", i))
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
for(i in 1:length(is_above_ma_AAPL)){
print(i)
}
for(i in 1:length(is_above_ma_AAPL)-2){
print(i)
}
no_of_AAPL_stocks <- 0
for(i in 1:length(is_above_ma_AAPL)-2){
print(paste0("Iteration", i))
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
}
no_of_AAPL_stocks <- 0
for(i in 1:(length(is_above_ma_AAPL)-2)){
print(paste0("Iteration", i))
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
}
no_of_AAPL_stocks <- 0
for(i in 1:(length(is_above_ma_AAPL)-2)){
if(is_above_ma_AAPL[i] & is_above_ma_AAPL[i+1]){
no_of_AAPL_stocks <- no_of_AAPL_stocks +1
}
}
no_of_AAPL_stocks
MSFT
Dates <- MSFT[1:, 0]
Dates <- MSFT[1:length(MSFT), 0]
Dates <- MSFT[, 0]
Dates[0]
Dates[-1]
Dates <- MSFT[, 0]
Dates
class(MSFT)
MSFT[-1]
Dates <- as.Date(MSFT[,0])
Dates <- as.Date(MSFT[0,0])
MSFT[0,0]
Dates <- MSFT[,0]
Dates
Dates <- c(MSFT[,0])
Dates
MSFT
index(MSFT)
Dates <- index(MSFT)
Dates <- Dates[-1]
plot(Dates, profit)
setwd("~/Desktop/Python_and_R/FE8828/Week6/Assignment5")
shiny::runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
temp <- c(100, 50, 0, -50, -100)
temp
temp[-which(temp==50)]
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
runApp('~/Desktop/Python_and_R/FE8828/Assignment5')
setwd("~/Desktop/Python_and_R/FE8828/Week6/Assignment5")
setwd("~/Desktop/Python_and_R/FE8828/Week6/Assignment5")
runApp()
