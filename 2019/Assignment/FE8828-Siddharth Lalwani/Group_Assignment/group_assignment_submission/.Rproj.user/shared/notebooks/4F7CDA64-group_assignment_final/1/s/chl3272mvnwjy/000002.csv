"0","# Question 2 Part 1"
"0","taylor_pnl <- function(ss){"
"0","  "
"0","  days=length(ss)"
"0","  # creating the dataframe"
"0","  df <- tibble(S=ss, days=1:days) %>% mutate(days=days-1)"
"0","  # calculate delta, gamma, vega and theta."
"0","  opt <- rowwise(df) %>% mutate("
"0","    price = GBSOption(""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3)@price,"
"0","    delta = GBSGreeks(""Delta"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3),"
"0","    gamma = GBSGreeks(""Gamma"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3),"
"0","    vega = GBSGreeks(""Vega"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3), "
"0","    theta = GBSGreeks(""Theta"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3) "
"0","  )"
"0","  opt[is.na(opt)] <- 0.0 # fill the last row theta and delta with 0.0"
"0","  # Create storage."
"0","  option_pnl_l = list(1:nrow(opt)-1)"
"0","  approx_pnl_l = list(1:nrow(opt)-1)"
"0","  for (pos in 2:nrow(opt)){"
"0","    prev_opt_price <- opt$price[[pos-1]]"
"0","    # using in-built from R GBSoptions"
"0","    option_pnl <- GBSOption(""c"", S = opt$S[pos], X = 100,"
"0","                            Time = (30-opt$days[pos]) / 250, r = 0, b = 0, sigma = 0.3)@price - prev_opt_price"
"0","    "
"0","    option_pnl_l[[pos-1]] = option_pnl"
"0","    # print(option_pnl)"
"0","    approxi_pnl <- (opt$delta[[pos-1]] * (opt$S[[pos]] - opt$S[[pos-1]])) + "
"0","      (0.5 * opt$gamma[[pos-1]] * (opt$S[[pos]] - opt$S[[pos-1]]) ** 2) +"
"0","      (opt$vega[[pos-1]] * 0) + (opt$theta[[pos-1]] * 1/250)"
"0","    # print(approxi_pnl)"
"0","    approx_pnl_l[[pos-1]]<-approxi_pnl"
"0","  }"
"0","  "
"0","  option_pnl_l<-as.numeric(unlist(option_pnl_l))"
"0","  approx_pnl_l<-as.numeric(unlist(approx_pnl_l))"
"0","  "
"0","  df_results <- tibble(R_pnl=option_pnl_l, approxi_pnl=approx_pnl_l, days=1:(length(ss)-1))"
"0","  "
"0","  df_results<- df_results %>% mutate(`absolute error`=(abs(R_pnl-approxi_pnl)))"
"0","  "
"0","  return(df_results)"
"0","}"
"0","# creating the price, and running part 1 code"
"0","stock_prices = get_price(100,31)"
"0","Q1_results =  taylor_pnl(stock_prices)"
"0","Q1_results"
