# Find the relationship between job and marital
bank %>%
dplyr::filter(marital=="married")  %>%
group_by(job) %>%
summarise(num = n()) -> res1
bank %>%
group_by(job) %>%
summarise(total = n()) -> res2
res <- full_join(res1,res2,by = "job")
res <- mutate(res, `marriage rate` = num/total)
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = marital)) +
geom_point(data = res, mapping = aes(x = job, y2 = `marriage rate`))
# Find the relationship between job and marital
bank %>%
dplyr::filter(marital=="married")  %>%
group_by(job) %>%
summarise(num = n()) -> res1
bank %>%
group_by(job) %>%
summarise(total = n()) -> res2
res <- full_join(res1,res2,by = "job")
res <- mutate(res, `marriage rate` = num/total)
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = marital)) +
# Find the relationship between job and marital
bank %>%
dplyr::filter(marital=="married")  %>%
group_by(job) %>%
summarise(num = n()) -> res1
bank %>%
group_by(job) %>%
summarise(total = n()) -> res2
res <- full_join(res1,res2,by = "job")
res <- mutate(res, `marriage rate` = num/total)
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = marital))
View(res)
# Find the relationship between age and education
bank %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = bank, mapping = aes(x = age_group, fill = education))
# Find the relationship between age and education
bank %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = bank, mapping = aes(x = age_group, fill = education, position = "fill"))
# Find the relationship between age and education
bank %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = bank, mapping = aes(x = age_group, fill = education), position = "fill")
# Find the relationship between age and education
bank %>%
dplyr::filter(education !="married")  %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = dplyr::filter(bank, education !="married"), mapping = aes(x = age_group, fill = education), position = "fill")
# Find the relationship between age and education
bank %>%
dplyr::filter(education !="student")  %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = dplyr::filter(bank, education !="student"), mapping = aes(x = age_group, fill = education), position = "fill")
View(res)
# Find the relationship between age and education
bank %>%
dplyr::filter(education =="student")  %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = dplyr::filter(bank, education !="student"), mapping = aes(x = age_group, fill = education), position = "fill")
# Find the relationship between age and education
bank %>%
dplyr::filter(education !="student")  %>%
group_by(age_group = (age %/% 10) * 10, education) %>%
summarise(num = n()) -> res
res
bank <- bank %>% mutate(age_group = (age %/% 10) * 10)
ggplot() +
geom_bar(data = dplyr::filter(bank, education !="student"), mapping = aes(x = age_group, fill = education), position = "fill")
# Find the relationship between job and education
bank %>%
group_by(job,education) %>%
summarise(num = n()) -> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = education))
View(res)
View(res)
# Find the relationship between job and education
bank %>%
group_by(job,education) %>%
summarise(num = n()) %>%
spread(education, num)
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = education))
# Find the relationship between job and education
bank %>%
group_by(job,education) %>%
summarise(num = n()) %>%
spread(education, num) -> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = education),position = "fill")
View(res)
View(res)
# outcome of the previous marketing campaign
bank %>%
group_by(poutcome) %>%
summarise(num = n()) -> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = poutcome, fill = education))
# outcome of the previous marketing campaign
bank %>%
group_by(education, poutcome) %>%
summarise(num = n()) %>%
spread(poutcome, num)-> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = education, fill = poutcome))
# outcome of the previous marketing campaign
bank %>%
group_by(education, poutcome) %>%
summarise(num = n()) %>%
spread(poutcome, num)-> res
res
ggplot() +
geom_bar(data = dplyr::filter(bank, poutcome !="unknown"), mapping = aes(x = education, fill = poutcome))
# outcome of the previous marketing campaign
bank %>%
group_by(education, poutcome) %>%
summarise(num = n()) %>%
spread(poutcome, num)-> res
res
ggplot() +
geom_bar(data = dplyr::filter(bank, poutcome !="unknown"), mapping = aes(x = education, fill = poutcome),position = "fill")
# Find the relationship between contact type and duration
bank %>%
group_by(contact) %>%
summarise(num = n(),average = mean(duration), max = max(duration), min = min(duration)) -> res
res
ggplot(bank, aes(contact, duration)) + geom_boxplot()
# Find the relationship between contact type and duration
bank %>%
group_by(contact) %>%
summarise(num = n(),average = mean(duration), max = max(duration), min = min(duration)) -> res
res
ggplot(bank, aes(contact, duration)) + geom_density(aes(fill = contact), alpha = 0.7)
# Find the relationship between contact type and duration
bank %>%
group_by(contact) %>%
summarise(num = n(),average = mean(duration), max = max(duration), min = min(duration)) -> res
res
ggplot(bank, aes(duration)) + geom_density(aes(fill = contact), alpha = 0.7)
# Find the relationship between contact type and duration
bank %>%
group_by(contact) %>%
summarise(num = n(),average = mean(duration), max = max(duration), min = min(duration), median = median(duration)) -> res
res
ggplot(bank, aes(duration)) + geom_density(aes(fill = contact), alpha = 0.7)
dplyr::filter(bank, default == "yes")
df <- dplyr::filter(bank, default == "yes")
View(df)
# Find the relationship between default and balance
bank %>%
group_by(default) %>%
summarise(average = mean(balance), max = max(balance), min = min(balance), median = median(balance)) -> res
res
ggplot() +
geom_density(bank, aes(dplyr::filter(bank, default == "yes"), fill = default), alpha = 0.7) +
geom_density(bank, aes(dplyr::filter(bank, default == "no"), fill = default), alpha = 0.7)
# Find the relationship between default and balance
bank %>%
group_by(default) %>%
summarise(average = mean(balance), max = max(balance), min = min(balance), median = median(balance)) -> res
res
ggplot() +
geom_density(dplyr::filter(bank, default == "yes"), aes(balance, fill = default), alpha = 0.7) +
geom_density(dplyr::filter(bank, default == "no"), aes(balance, fill = default), alpha = 0.7)
# Find the relationship between default and balance
bank %>%
group_by(default) %>%
summarise(average = mean(balance), max = max(balance), min = min(balance), median = median(balance)) -> res
res
ggplot(aes(balance)) +
geom_density(data = dplyr::filter(bank, default == "yes"), aes( fill = default), alpha = 0.7) +
geom_density(data = dplyr::filter(bank, default == "no"), aes(fill = default), alpha = 0.7)
# Find the relationship between default and balance
bank %>%
group_by(default) %>%
summarise(average = mean(balance), max = max(balance), min = min(balance), median = median(balance)) -> res
res
ggplot(bank,aes(balance)) + geom_density(aes( fill = default), alpha = 0.7)
# Find the relationship between default and balance
bank %>%
group_by(default) %>%
summarise(average = mean(balance), max = max(balance), min = min(balance), median = median(balance)) -> res
res
ggplot(bank, aes(default, balance)) + geom_boxplot()
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) %>%
spread(loan, median) -> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = education),position = "fill")
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(median = median(balance)) %>%
spread(loan, median) -> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = education),position = "fill")
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) res
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
ggplot() +
geom_bar(data = bank, mapping = aes(x = job, fill = education),position = "fill")
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
ggplot(bank) +
geom_boxplot(aes(housing, balance)) +
geom_boxplot(aes(loan, balance))
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
library(latticeExtra)
install.packages("latticeExtra")
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
library(latticeExtra)
cloud(median~housing+loan, d, panel.3d.cloud=panel.3dbars, col.facet='grey',
xbase=0.4, ybase=0.4, scales=list(arrows=FALSE, col=1),
par.settings = list(axis.line = list(col = "transparent")))
install.packages("rgl")
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
library(rgl)
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
library(rgl)
install.packages("scatterplot3d")
# Find the relationship between balance and loans
bank %>%
group_by(housing,loan) %>%
summarise(average = mean(balance), median = median(balance)) -> res
res
library(scatterplot3d)
with(bank,{scatterplot3d(x = loan, y = housing, z = balance)})
library(fOptions)
library(fOptions)
library(tidyverse)
library(timeDate)
library(timeSeries)
library(fBasics)
# Step 1 Copy the options data
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "call", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Call_Option <- mutate(GOOG_Option,Call_Put = "Call",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "put", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Put_Option <- mutate(GOOG_Option,Call_Put = "Put",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
Option <- bind_rows(Call_Option,Put_Option)
# Step 2 Count the total valuation
Option <- mutate(Option,Value = `Open Interest`*(Bid+Ask)/2)
# call alone and put alone
Option %>% group_by(Call_Put) %>% summarise(Total_value = sum(Value))
# call and put
Option %>% summarise(Total_value = sum(Value))
# Step 3.1 Find those in the money
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < Underlying)|(Call_Put =="Put" & Strike > Underlying))
# Step 3.2 total Open Interest
sum(in_the_money['Open Interest'])
# Step 4 Plot the volatility curve
volSmile <- dplyr::filter(Option,(Call_Put =="Call" & Strike > Underlying)|(Call_Put =="Put" & Strike < Underlying))
Time <- as.numeric((as.Date("2019-12-20") - as.Date("2019-10-5")))/365
volSmile <- volSmile %>%
mutate(type = ifelse(Call_Put =="Call","c","p"),Implied_Volatility = 0)
# mutate(Implied_Volatility = GBSVolatility(`Last Price`, type, 1187.83, Strike, Time, r = 0.03, b = 0))
for(i in 1:nrow(volSmile)) {
df <- transmute(volatility[i,,drop = FALSE],Implied_Volatility = GBSVolatility(`Last Price`, type, 1234.04, Strike, Time, r = 0.03, b = 0))
volSmile[i,ncol(volSmile)] <- as.numeric(df[1,ncol(df),drop = FALSE])
}
ggplot(volSmile,aes(x = Strike, y = Implied_Volatility)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
library(fOptions)
library(tidyverse)
library(timeDate)
library(timeSeries)
library(fBasics)
library(readxl)
# Step 1 Copy the options data
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "call", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Call_Option <- mutate(GOOG_Option,Call_Put = "Call",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "put", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Put_Option <- mutate(GOOG_Option,Call_Put = "Put",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
Option <- bind_rows(Call_Option,Put_Option)
# Step 2 Count the total valuation
Option <- mutate(Option,Value = `Open Interest`*(Bid+Ask)/2)
# call alone and put alone
Option %>% group_by(Call_Put) %>% summarise(Total_value = sum(Value))
# call and put
Option %>% summarise(Total_value = sum(Value))
# Step 3.1 Find those in the money
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < Underlying)|(Call_Put =="Put" & Strike > Underlying))
# Step 3.2 total Open Interest
sum(in_the_money['Open Interest'])
# Step 4 Plot the volatility curve
volSmile <- dplyr::filter(Option,(Call_Put =="Call" & Strike > Underlying)|(Call_Put =="Put" & Strike < Underlying))
Time <- as.numeric((as.Date("2019-12-20") - as.Date("2019-10-5")))/365
volSmile <- volSmile %>%
mutate(type = ifelse(Call_Put =="Call","c","p"),Implied_Volatility = 0)
# mutate(Implied_Volatility = GBSVolatility(`Last Price`, type, 1187.83, Strike, Time, r = 0.03, b = 0))
for(i in 1:nrow(volSmile)) {
df <- transmute(volatility[i,,drop = FALSE],Implied_Volatility = GBSVolatility(`Last Price`, type, 1234.04, Strike, Time, r = 0.03, b = 0))
volSmile[i,ncol(volSmile)] <- as.numeric(df[1,ncol(df),drop = FALSE])
}
ggplot(volSmile,aes(x = Strike, y = Implied_Volatility)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
View(volSmile)
library(fOptions)
library(tidyverse)
library(timeDate)
library(timeSeries)
library(fBasics)
library(readxl)
# Step 1 Copy the options data
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "call", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Call_Option <- mutate(GOOG_Option,Call_Put = "Call",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "put", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Put_Option <- mutate(GOOG_Option,Call_Put = "Put",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
Option <- bind_rows(Call_Option,Put_Option)
# Step 2 Count the total valuation
Option <- mutate(Option,Value = `Open Interest`*(Bid+Ask)/2)
# call alone and put alone
Option %>% group_by(Call_Put) %>% summarise(Total_value = sum(Value))
# call and put
Option %>% summarise(Total_value = sum(Value))
# Step 3.1 Find those in the money
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < Underlying)|(Call_Put =="Put" & Strike > Underlying))
# Step 3.2 total Open Interest
sum(in_the_money['Open Interest'])
# Step 4 Plot the volatility curve
volSmile <- dplyr::filter(Option,(Call_Put =="Call" & Strike > Underlying)|(Call_Put =="Put" & Strike < Underlying))
Time <- as.numeric((as.Date("2019-12-20") - as.Date("2019-10-5")))/365
volSmile <- volSmile %>%
mutate(type = ifelse(Call_Put =="Call","c","p"),Implied_Volatility = 0)
View(volSmile)
df <- transmute(volatility[1,,drop = FALSE],Implied_Volatility = GBSVolatility(`Last Price`, type, 1234.04, Strike, Time, r = 0.03, b = 0))
df <- transmute(volSmile[i,,drop = FALSE],Implied_Volatility = GBSVolatility(`Last Price`, type, 1234.04, Strike, Time, r = 0.03, b = 0))
for(i in 1:nrow(volSmile)) {
df <- transmute(volSmile[i,,drop = FALSE],Implied_Volatility = GBSVolatility(`Last Price`, type, 1234.04, Strike, Time, r = 0.03, b = 0))
volSmile[i,ncol(volSmile)] <- as.numeric(df[1,ncol(df),drop = FALSE])
}
ggplot(volSmile,aes(x = Strike, y = Implied_Volatility)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
library(fOptions)
library(tidyverse)
library(timeDate)
library(timeSeries)
library(fBasics)
library(readxl)
# Step 1 Copy the options data
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "call", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Call_Option <- mutate(GOOG_Option,Call_Put = "Call",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
GOOG_Option <- read_excel("GOOG Option.xlsx", sheet = "put", col_types = c("text", "text", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
Put_Option <- mutate(GOOG_Option,Call_Put = "Put",Expiry = as.Date("2019-12-20"),Underlying = 1187.83)
Option <- bind_rows(Call_Option,Put_Option)
# Step 2 Count the total valuation
Option <- mutate(Option,Value = `Open Interest`*(Bid+Ask)/2)
# call alone and put alone
Option %>% group_by(Call_Put) %>% summarise(Total_value = sum(Value))
# call and put
Option %>% summarise(Total_value = sum(Value))
# Step 3.1 Find those in the money
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < Underlying)|(Call_Put =="Put" & Strike > Underlying))
# Step 3.2 total Open Interest
sum(in_the_money['Open Interest'])
# Step 4 Plot the volatility curve
volSmile <- dplyr::filter(Option,(Call_Put =="Call" & Strike > Underlying)|(Call_Put =="Put" & Strike < Underlying))
Time <- as.numeric((as.Date("2019-12-20") - as.Date("2019-10-5")))/365
volSmile <- volSmile %>%
mutate(type = ifelse(Call_Put =="Call","c","p"),Implied_Volatility = 0)
for(i in 1:nrow(volSmile)) {
df <- transmute(volSmile[i,,drop = FALSE],Implied_Volatility = GBSVolatility(`Last Price`, type, 1234.04, Strike, Time, r = 0.03, b = 0))
volSmile[i,ncol(volSmile)] <- as.numeric(df[1,ncol(df),drop = FALSE])
}
ggplot(volSmile,aes(x = Strike, y = Implied_Volatility)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
shiny::runApp('Q3')
#Question 1
portfolio <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
portfolio %>% group_by(type) %>%
mutate(value = GBSOption(TypeFlag = type, S = underlying, X = strike,Time = 1, r = 0.01, b = 0, sigma = 0.3)@price) %>%
ungroup %>%
summarise(Total_value = sum(value,na.rm = TRUE))
#Question 1
library(lubridate)
count_bizday <- function(year) {
day1 <- 1
day2 <- 1
c <- (year-1) %/% 100
y <- (year-1) %% 100
w1 <- (1 + y + y%/%4 + c%/%4 +5*c+ 36) %% 7
w2 <- (w1+1) %% 7
if(w1 %in% c(1,0)){day1 <- 0}
if(w2 %in% c(1,0)){day2 <- 0}
if ((year%%4 != 0) | (year%%400 != 0 & year%%100 == 0)){
day2 <- 0
}
return(52*5+day1+day2)
}
#Question 2: secretary question
library(purrr)
make_choice <- function(N, split_number){
input_list <- sample(1:N, N, replace = FALSE)
best_selection <- 1
best_evaluation <- input_list[1]
for (i in 2:split_number) {
if(best_evaluation < input_list[i]){best_evaluation <- input_list[i]}
}
for (i in (split_number+1):N) {
if(input_list[i] > best_evaluation){
best_selection <- input_list[i]
break
}
}
best_selection
}
find_optimal <- function(N){
split_number <- 1:(N%/%2)
prob <- purrr::map(1:(N%/%2), function(x){
count <- 0
for (i in 1:400) {
if(make_choice(N,x)==N){count <- count+1}
}
count/400
})
prob <- as.vector(unlist(prob))
split_number[match(max(prob),prob)]
}
find_optimal(3)
find_optimal(10)
find_optimal(100)
#Question 3: Birth ratio question
library(tidyverse)
ratio <- rep(0,1000)
for (i in 1:1000) {
girl <- 0
trial <- purrr::map(1:10,function(x){
sample(c(0,1), 100, replace = TRUE) # 0 represents Female, 1 represents Male
})
for (j in 1:10) {
girl = girl + which(trial[[j]]==1)[1]-1
}
ratio[i] <- (girl/(girl+10))
}
plot(density(ratio))
