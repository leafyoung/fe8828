shiny::runApp('R_Shiny')
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
1+2
| Expiry Date | Strike | Open Interest | Underlying | Call/Put | Bid | Ask
library(readxl)
GOOG_Option <- read_excel("GOOG Option.xlsx",
sheet = "call", col_types = c("text",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"numeric", "numeric"))
View(GOOG_Option)
library(readxl)
GOOG_Option <- read_excel("GOOG Option.xlsx",
sheet = "put", col_types = c("text",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(GOOG_Option)
library(readxl)
GOOG_Option <- read_excel("GOOG Option.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(GOOG_Option)
library(readxl)
Call_Option <- read_excel("GOOG Option.xlsx",
sheet = "call", col_types = c("text",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(GOOG_Option)
View(GOOG_Option)
rm(GOOG_Option)
library(readxl)
Put_Option <- read_excel("GOOG Option.xlsx",
sheet = "put", col_types = c("text",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(GOOG_Option)
View(Put_Option)
library(tidyverse)
View(Call_Option)
#Assignment: Book option trades
colnames(Call_Option)
Call_Option <- mutate(Call_Option,Call_Put = "Call",Expiry = as.Date("2019-12-20"),Underlying = 1234.03)
colnames(Call_Option)
Put_Option <- mutate(Put_Option,Call_Put = "Put",Expiry = as.Date("2019-12-20"),Underlying = 1234.03)
bind_rows(Call_Option,Put_Option)
Option <- bind_rows(Call_Option,Put_Option)
mutate(Option,Value="Open Interest"*("Bid"+"Ask")/2)
View(Option)
mutate(Option,Value='Open Interest'*(Bid+Ask)/2)
View(Option)
mutate(Option,Value=`Open Interest`*(Bid+Ask)/2)
View(Option)
View(Option)
#Assignment: Book option trades
colnames(Option)
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < `Last Price`)|Call_Put =="Put" & Strike > `Last Price`))
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < `Last Price`)|(Call_Put =="Put" & Strike > `Last Price`))
View(in_the_money)
in_the_money <- dplyr::filter(Option,(Call_Put =="Call" & Strike < Underlying)|(Call_Put =="Put" & Strike > Underlying))
View(in_the_money)
sum(in_the_money['Open Interest'])
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
library(tidyverse)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)+geom_line()
ggplot(bank, aes(default, age)) + geom_point()
ggplot(bank, aes(age, default)) + geom_point()
ggplot(bank, aes(job, age)) + geom_point()
#Add 2nd geometry
ggplot(bank, aes(age, balance)) + geom_point() + geom_smooth()
ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
ggplot(bank, aes(age, balance, color = job)) + geom_point() +
geom_smooth(aes(age, balance)) +
scale_y_log10()
ggplot(bank, aes(age, balance, color = job)) + geom_point() +
geom_smooth(aes(age, balance)) +
scale_y_log10()
ggplot(bank) + geom_point(aes(age, balance, color = job)) +
geom_smooth(aes(age, balance)) +
scale_y_log10()
ggplot(bank, aes(age, balance, color = job)) + geom_point() + geom_smooth()
ggplot(bank, aes(age, job)) +
geom_point() +
scale_y_discrete(limit = rev(levels(bank$job)))
ggplot(bank, aes(age, job)) +
geom_point()
ggplot(bank, aes(age, job)) +
geom_point() +
scale_y_discrete(limit = rev(levels(bank$job)), color = admin)
ggplot(bank, aes(age, job)) +
geom_point() +
scale_y_discrete(limit = rev(levels(bank$job)), color = job)
ggplot(bank, aes(age, job)) +
geom_point(color = job) +
scale_y_discrete(limit = rev(levels(bank$job)))
ggplot(bank, aes(age, job)) +
geom_point(aes(color = job)) +
scale_y_discrete(limit = rev(levels(bank$job)))
ggplot(bank, aes(age, job)) +
geom_point(aes(color = count(job))) +
scale_y_discrete(limit = rev(levels(bank$job)))
g + geom_point() + geom_smooth(method = "lm")
g <- ggplot(bank, aes(x = age, y = duration))
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ job)
g + geom_point() + geom_smooth(method = "lm")
ggplot(bank) +
geom_point(aes(age, duration, group = contact))
ggplot(bank) +
geom_point(aes(age, duration))
ggplot(bank, aes(job, age)) + geom_boxplot()
ggplot(bank, aes(duration, fill = job)) + geom_density()
ggplot(bank, aes(age, color = job, fill = job, alpha = 0.3)) +
geom_density()
ggplot(data = bank, mapping = aes(x = duration, fill = job)) +
geom_histogram(binwidth = 100)
ggplot(data = bank, aes(x = duration, fill = job)) +
geom_histogram(binwidth = 100)
ggplot(bank) + geom_bar(aes(x = age, fill = job))
ggplot(bank) + geom_bar(aes(x = age, fill = job),position = "fill")
# Print
print("This is ","cat")
# Print
print("This is ")
# Print
print(This is)
# Print
print(This is,1)
# Print
print('This is')
new_string <- paste("This is ", "cat")
new_string <- paste0("This is ", "cat")
new_string <- paste0("This is ", "cat", sep = "a")
new_string <- paste0(1:3, sep = "a")
x <- c(Sys.Date(), Sys.Date(), Sys.Date())
cat(paste("Current dates is ", x, ".\n")) # with space
cat(paste0("Current dates is ", x, ".\n")) # without space
cat(paste0("Current dates is ", paste0(x, collapse = ", "), ".\n"))
paste(1:3, sep = "a") #连接
paste0(1:3, sep = "a")
install.packages("bizdays")
ret_lots_of_work <- function() {
return(list(a = a, b = b))
}
res <- ret_lots_of_work()
ret_lots_of_work <- function() {
return(list(a = "a", b = "b"))
}
res <- ret_lots_of_work()
app_config <- list(MAX = 10, MIN = 10, DISPLAY_RESULT = TRUE)
do_lots_of_work <- function(app_config) {
app_config$MAX
}
c <- do_lots_of_work(app_config)
rm(x)
rm(c)
rm(do_lots_of_work())
View();head()
View(df);head()
df <- tibble(
date = seq(as.Date("2019-01-01"), as.Date("2019-01-10"), by = "day"),
stock = replicate(10, paste0(sample(LETTERS, 3, replace = TRUE), collapse =
"")),
quantity = round(runif(10) * 10000 ,0))
# Dataframe
library(tibble)
df <- tibble(
date = seq(as.Date("2019-01-01"), as.Date("2019-01-10"), by = "day"),
stock = replicate(10, paste0(sample(LETTERS, 3, replace = TRUE), collapse =
"")),
quantity = round(runif(10) * 10000 ,0))
str(df)
# Access
df["date"] # return a data frame
df[["date"]] # return a value
df[c(3, 6, 9), , drop = F] #rows
df[, 1, drop = FALSE] #columns
res <- purrr::map(1:10, rnorm, n = 1000)
map_dbl(res, mean) #statistics
# APPLICATION
library(purrr)
map_dbl(res, mean) #statistics
