set.seed(100)
portfolio <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
portfolio %>% group_by(type) %>%
# YY: need rowwise() to split into every row.
rowwise() %>%
mutate(value = GBSOption(TypeFlag = type, S = underlying, X = strike,Time = 1, r = 0.01, b = 0, sigma = 0.3)@price) %>%
ungroup %>%
summarise(Total_value = sum(value,na.rm = TRUE))
set.seed(100)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
set.seed(100)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
df1<-rowwise(df)%>%
transmute(price=GBSOption(TypeFlag = type,S=underlying,X=strike,Time=Time,r=r,b=b,sigma = sigma)@price)
total_value <- sum(df1)
total_value
set.seed(100)
df <- data.frame(type = sample(c("p", "c"), 100, replace = TRUE),
strike = round(runif(100)*100, 0),
underlying = round(runif(100)*100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
sum(.$opt_price)
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
sum(.$opt_price)
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price)
price_list
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
ungroup()
price_list
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
ungroup() %>%
sum(.$opt_price)
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
ungroup() %>%
.$opt_price
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
ungroup() %>%
.$opt_price %>%
sum
price_list
df <- data.frame(type = sample(c("p", "c"), 100, replace = TRUE),
underlying = round(runif(100)*100, 0),
strike = round(runif(100)*100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
ungroup() %>%
.$opt_price %>%
sum
price_list
set.seed(100)
df <- data.frame(type = sample(c("p", "c"), 100, replace = TRUE),
underlying = round(runif(100)*100, 0),
strike = round(runif(100)*100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
price_list <- rowwise(df) %>%
mutate(opt_price = GBSOption(TypeFlag = type, S = underlying, X = strike,
Time = Time, r = r, b = b, sigma = sigma)@price) %>%
ungroup() %>%
.$opt_price %>%
sum
price_list
set.seed(100)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
underlying = round(runif(100) * 100, 0),
strike = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
total_value=0
for(i in 1:100)
{
value=GBSOption(TypeFlag = df$type[i], S = df$strike[i], X = df$underlying[i],
Time = df$Time[i], r = df$r[i], b = df$b[i], sigma = df$sigma[i])@price
total_value=total_value+value
}
total_value
set.seed(100)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
total_value=0
for(i in 1:100)
{
value=GBSOption(TypeFlag = df$type[i], S = df$strike[i], X = df$underlying[i],
Time = df$Time[i], r = df$r[i], b = df$b[i], sigma = df$sigma[i])@price
total_value=total_value+value
}
total_value
library(fOptions)
library(dplyr)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
TypeFlag = type,
S = strike,
X = underlying,
Time = Time,
r = r,
b = b,
sigma = sigma)@price) %>%
ungroup()
summarise(df, total = sum(price*strike))
set.seed(100)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
df <- df %>%
rowwise() %>%
mutate(price = GBSOption(
TypeFlag = type,
S = strike,
X = underlying,
Time = Time,
r = r,
b = b,
sigma = sigma)@price) %>%
ungroup()
summarise(df, total = sum(price*strike))
# No need to multiply strike
# summarise(df, total = sum(price*strike))
summarise(df, total = sum(price))
set.seed(100)
df <- data.frame(type = sample(c("c", "p"), 100, replace = TRUE),
strike = round(runif(100) * 100, 0),
underlying = round(runif(100) * 100, 0),
Time = 1,
r = 0.01,
b = 0,
sigma = 0.3)
df <- df %>%
rowwise() %>%
mutate(price = GBSOption(
TypeFlag = type,
S = strike,
X = underlying,
Time = Time,
r = r,
b = b,
sigma = sigma)@price) %>%
ungroup()
# No need to multiply strike
# summarise(df, total = sum(price*strike))
summarise(df, total = sum(price))
#Assignment 1
#Exercise 3 : slides 72 in session 3 notes
library(readxl)
library(dplyr)
library(fOptions)
#1.1 Copy the options data
CallOptions <- read_excel("Dropbox/FE8828-Yuan Yuxuan/Assignment4/GoogleOptionData.xlsx",
sheet = "Call", col_types = c("skip",
"skip", "numeric", "skip", "numeric",
"numeric", "skip", "skip", "skip",
"numeric", "skip"))
#1.1 Copy the options data
CallOptions <- read_excel("E:/gdrive/MFECourse/FE8828/2019/FE8828-Yuan Yuxuan/Assignment4/GoogleOptionData.xlsx",
sheet = "Call", col_types = c("skip",
"skip", "numeric", "skip", "numeric",
"numeric", "skip", "skip", "skip",
"numeric", "skip"))
CallOptions <- mutate(CallOptions, `Call/Put` = "c",
`Underlying` = 1212.07,
`Expiry Date` = as.Date("2019-12-20"))
PutOptions <- read_excel("E:/gdrive/MFECourse/FE8828/2019/FE8828-Yuan Yuxuan/Assignment4/GoogleOptionData.xlsx",
sheet = "Put", col_types = c("skip",
"skip", "numeric", "skip", "numeric",
"numeric", "skip", "skip", "skip",
"numeric", "skip"))
PutOptions <- mutate(PutOptions, `Call/Put` = "p",
`Underlying` = 1212.07,
`Expiry Date` = as.Date("2019-12-20"), `Open Interest` = ifelse(is.na(`Open Interest`), 0, `Open Interest`))
Options <- bind_rows(CallOptions, PutOptions)
#1.2 Count the total valuation of 1) call alone, 2) put alone, 3) call and put.
Valuation_Inidividual <-
group_by(Options, `Call/Put`) %>%
summarise(`Total Valuation` = sum(`Open Interest` * (Bid+Ask)/2))
Valuation_Inidividual
Valuation_Both <- Options %>%
summarise(`Total Valuation` = sum(`Open Interest` * (Bid+Ask)/2)) %>%
mutate(`Call/Put` = "c&p")
Valuation_Both
Total_Valulation
Valuation_Both <- Options %>%
summarise(`Total Valuation` = sum(`Open Interest` * (Bid+Ask)/2)) %>%
mutate(`Call/Put` = "c&p")
Valuation_Both
Total_Valulation <- bind_rows(Valuation_Inidividual, Valuation_Both)
Total_Valulation
#1.4. Plot the volatility curve, strike v.s. vol. For strike < current price, use puts' price; for strike > current price, use callsâ€™ price.
Options_Q4 <- dplyr::filter(Options, (`Call/Put`=="c" & `Strike` > `Underlying`) | (`Call/Put`=="p" & `Strike` < `Underlying`))
Options_Q4 <- mutate(rowwise(Options_Q4), `Volatility` = GBSVolatility(price = (`Bid`+`Ask`)/2,
TypeFlag = `Call/Put`,
S = `Underlying`,
X = `Strike`,
Time = as.numeric(`Expiry Date`-as.Date("2019-10-12"))/365,
r = 0.03,
b = 0))
plot(select(Options_Q4, `Strike`, `Volatility`))
1:10 > 1 | 1:10 > 2
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Yuan Yuxuan/Assignment4/Assignment3')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-XU HAN/Assignment 4/shiny-36-update.R')
install.packages("RQuantLib")
option <- read.csv("E:/gdrive/MFECourse/FE8828/2019/FE8828-XU HAN/Assignment 4/Goog.option.csv")
#1.1
df=data.frame('Expiry Date'=as.Date("2019-12-20"),Strike=option$Strike,
'Open Interest'=option$Open.Interest,Underlying=option$Last.Price,
'Call/Put'=option$Call.Put,Bid=option$Bid,Ask=option$Ask)
#1.2
df["valuation"]=0
for(i in 1:length(df$Expiry.Date))
{
df$valuation[i]=df$Open.Interest[i] * (df$Bid[i]+df$Ask[i]) / 2
}
Total.value_call=0
Total.value_put=0
for(i in 1:length(df$Expiry.Date))
{
if(df$Call.Put[i]=='Call')
Total.value_call=Total.value_call+df$valuation[i]
if(df$Call.Put[i]=='Put')
Total.value_put=Total.value_put+df$valuation[i]
}
Total.value_call
Total.value_put
Total.value=Total.value_put+Total.value_call
Total.value
#1.3
#The stock price is 1,215.45
total_Open_Interest=0
for(i in 1:length(df$Expiry.Date))
{
if(df$Call.Put[i]=='Call')
{
if(df$Strike[i]<1215.45)
{
total_Open_Interest=total_Open_Interest+df$Open.Interest[i]
}
}
if(df$Call.Put[i]=='Put')
{
if(df$Strike[i]>1215.45)
{
total_Open_Interest=total_Open_Interest+df$Open.Interest[i]
}
}
}
total_Open_Interest
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-XIAO LIJIAN/Assignment 4/Add_Remove_Button.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-WangPeng/Assignment4/3')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-TanWangQuan/Assignment4/shiny-36-update')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Siddharth Lalwani/Assignment 4/shiny36_remove.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Sabina Sun/Assignment4/Shiny36-Update.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Qu Mengyuan/Assignment4/Q3')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Low Wei-Ning, Raelynn/Assignment 4/Question 3.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-LIU Nuozhou/assignment 4/shiny 3.6.R')
#3
OpenInterest_call <- 0
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-LI Jiajing/Assignment4/question3.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Leong Shu Hui Felicia/Assignment4/Q3Shiny')
source('E:/gdrive/MFECourse/FE8828/2019/FE8828-Leong Shu Hui Felicia/Assignment4/Q1.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-EnwenLi/assignment4/Assignmen4_3.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Kwan Wei Kuang/Assignment4/Assignment4-Q3 (shiny-36-update).R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Ji Bingyan/Assignment_4/shiny-36-update.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Iman Taleb/Assignment 4/ex 3. shiny26remove.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Iman Taleb/Assignment 4/ex 3. shiny26remove.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Iman Taleb/Assignment 4/ex 3. shiny26remove.R')
source('E:/gdrive/MFECourse/FE8828/2019/FE8828-Hsiung Yi/Assignment4/Assignment4-1.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Hsiung Yi/Assignment4/Assignment4-3')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-HARSHIT JOSHI(G1900840B)/Assignment_4/Assgn04-Q3.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Feng Ruiwan/assignment4')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-FANG, YUAN/Assignment4/Shiny-36 tweak.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Chen Jianguang Kevin/Assignment 4/Assignment4C.R')
apply(1:10, 1, function(x) GBSVolatility("c", x, 3, ))
GBSVolatility()
GBSVolatility
apply(1:10, 1, function(x) GBSVolatility("c", x, 3, 1, 0.03, 0.01))
apply(1:10, 1, function(x) GBSVolatility(0.3, "c", x, 3, 1, 0.03, 0.01))
apply(1:10, function(x) GBSVolatility(0.3, "c", x, 3, 1, 0.03, 0.01))
sapply(1:10, function(x) GBSVolatility(0.3, "c", x, 3, 1, 0.03, 0.01))
tibble(x = 1:10) %>% rowwise() %>% mutate(vol =  GBSVolatility(0.3, "c", x, 3, 1, 0.03, 0.01)))
tibble(x = 1:10) %>% rowwise() %>% mutate(vol =  GBSVolatility(0.3, "c", x, 3, 1, 0.03, 0.01))
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Chan Siew Yuen Matthew/Assignment 4/Assignment4_Q3.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Bai Haoyu/A4_Bai Haoyu/Q3_Bai Haoyu')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Arihant_Jain/Assignment 4/shiny-36-update.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/FE8828-Alan Lee Yung Chong/Assignment_four/Shiny_remove.R')
unlink('E:/gdrive/MFECourse/FE8828/2019/FE8828-Yuan Yuxuan/Assignment3/Assignment2_redo_cache', recursive = TRUE)
install.packages("ggrepel")
library(tidyverse)
library(lubridate)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(tidyquant)
library(xts)
library(dplyr)
library(tibble)
library(Quandl)
library(caret)
# Use echo = TRUE for assignment is an exception, so code is visible.
knitr::opts_chunk$set(echo = TRUE, fig.align="center", collapse = TRUE, cache = TRUE)
bank <- read.csv("https://goo.gl/PBQnBt", sep = ";")
#We find that in general, people who engaged in management roles have more balnce than other occupations across all the age groups.
bank8<- bank%>%mutate( employment = ifelse(job == "admin." | job == "blue-collar" | job == "entrepreneur" |job == "management" |job == "self-employed" |job == "services" |job == "technician", "Employed", "Not Employed"))
res8 <- dplyr::filter(bank8, employment == "Employed")
ggplot(res8) +
geom_point(aes(x = age, y = balance))+
geom_smooth(data = dplyr::filter(job == "management"),
aes(x = age, y = balance), color = "yellow", method = "loess") +
geom_smooth(data = dplyr::filter(res8, job != "management"),
aes(x = age, y = balance), color = "green", method = "loess") +
ylim(-1000, 10000)
#We find that in general, people who engaged in management roles have more balnce than other occupations across all the age groups.
bank8<- bank%>%mutate( employment = ifelse(job == "admin." | job == "blue-collar" | job == "entrepreneur" |job == "management" |job == "self-employed" |job == "services" |job == "technician", "Employed", "Not Employed"))
res8 <- dplyr::filter(bank8, employment == "Employed")
ggplot(res8) +
geom_point(aes(x = age, y = balance))+
geom_smooth(data = dplyr::filter(res8, job == "management"),
aes(x = age, y = balance), color = "yellow", method = "loess") +
geom_smooth(data = dplyr::filter(res8, job != "management"),
aes(x = age, y = balance), color = "green", method = "loess") +
ylim(-1000, 10000)
install.packages("scatterplot3d")
source('~/.active-rstudio-document', echo=TRUE)
source('E:/gdrive/MFECourse/FE8828/2019/FE8828-HARSHIT JOSHI(G1900840B)/Assignment_3/Assignment03-question2.R')
install.packages("psych")
shiny::runApp('E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1')
library(plotly)
library(tidyverse)
source('E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1/script1.R')
shiny::runApp('E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1')
dplyr::filter
dplyr::filter
runApp('E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1')
source('E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1/script1.R')
runApp('E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1')
getwd)
getwd()
library(shiny)
library(stringr)
library(plotly)
library(reshape)
library(tidyverse) # Let tidyverse to overwrite all else packages, e.g. plotly::filter conflicts
library(ggplot2)
library(DT)
# setwd("C:/Users/Nuozh/Desktop/programming for web application/project")
setwd("E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1")
source("script1.R")
runApp()
runApp()
runApp()
runApp()
# setwd("C:/Users/Nuozh/Desktop/programming for web application/project")
setwd("E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1")
source("script1.R")
TX<-Transaction()
TX<-Initial(TX)
TX<-GenHisData(TX)
Months<-c(7,8,9,10,11)
Names<-TX@Information$Name
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
h1(strong("Warm Welcome"),align="center",style="font-family: 'STHupo';font-size: 44pt")
),
navbarPage(
title = strong("Views"),
tabPanel(
h3("Client View"),
h3("Open a new account"),
textInput("newclient","Please input your name here:"),
h4("Please input your initial deposit and credit"),
numericInput("deposit", "Deposit:", value = 0),
numericInput("credit", "Credit:", value = 0),
actionButton("confirm","Confirm"),
#actionButton("add", "Add"),
hr(),
h3("Transaction"),
fluidRow(
column(6, h3("Amount"),
numericInput("amount", "Amount:", value = 0)
),
column(6, h3("Currency"),
selectInput("Currency","Currency:",
choices = c("USD","SGD","CNY"))
)),
fluidRow(
column(4,"",
actionButton("save","Save")
),
column(4,"",
actionButton("withdraw","Withdraw")
),
column(4,"",
actionButton("spend","Spend")
)
),
h3("Client View"),
selectInput("Name","Name:",
choices = Names),
hr(),
selectInput("Month","Month:",
choices = Months),
hr(),
h3("Balance Chart"),
plotOutput("BalanceChart"),
hr(),
h3("Table of Transactions History"),
dataTableOutput("TransactionHistory"),
hr(),
h3("Table of Monthly Summary"),
dataTableOutput("Summary"),
hr()
),
tabPanel(
h3("Bank View"),
selectInput("Month1","Month:",
choices = Months),
hr(),
h3("Total Deposit and Credit Chart"),
plotOutput("TDCC"),
hr(),
h3("PnL Table"),
dataTableOutput("PnL"),
hr(),
h3("Risk Table"),
dataTableOutput("RiskTable"),
hr()
)
)
)
source("script1.R")
TX<-Transaction()
TX<-Initial(TX)
TX<-GenHisData(TX)
library(DT)
# setwd("C:/Users/Nuozh/Desktop/programming for web application/project")
setwd("E:/gdrive/MFECourse/FE8828/2019/Group/Group 4/Q1")
source("script1.R")
TX<-Transaction()
TX<-Initial(TX)
TX<-GenHisData(TX)
EXRS
# load('e://R working directory//ExchangeRates.Rda')
vv <- load("ExchangeRates.Rdata")
vv
vv
head(RXRS)
head(EXRS)
mutate(EXRS, SGD = 1)
mutate(EXRS, SGD = 1) %>% rename(USD = SGD_USD, CNY = SGD_CNY)
EXRS %>% mutate(SGD = 1) %>% rename(USD = SGD_USD, CNY = SGD_CNY)
EXRS %>% mutate(SGD = 1) %>% dplyr::(USD = SGD_USD, CNY = SGD_CNY)
EXRS %>% mutate(SGD = 1)
EXRS %>% mutate(SGD = 1) %>% dplyr::rename(USD = SGD_USD, CNY = SGD_CNY)
