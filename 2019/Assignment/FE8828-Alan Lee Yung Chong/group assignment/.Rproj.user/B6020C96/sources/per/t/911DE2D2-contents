---
title: "group_assignment_final"
author: "Alan Lee"
date: "October 27, 2019"
output: html_document
---
```{r setup, include=FALSE}
library(tidyverse)
library(fOptions)
library(dplyr)

library(xts)
library(readxl)
library(readr)
library(bizdays)
library(grid)
library(gridExtra)

knitr::opts_chunk$set(echo = TRUE)

```

#This R markdown will contain only Q2 and Q3's solution.

The following cell will define the function used to generate the price randomly for given number of days.
```{r}
get_price <- function(S0, t){
  # this function will generate the daily price
  # S is the stock price of the previous day,
  K <- 100
  sigma <- 0.5 # realized vol can be 0.3 for [2] or 0.5 for [3]
  drift <- 0 # drift = r - q
  timestep <- 1 / 250
  days <- t / 250
  N <- days / timestep
  p1 <- (drift - 0.5 * sigma * sigma) * timestep
  p2 <- sigma * sqrt(timestep)
  # ss is the simulated price movement for N days
  ss <- rep(S0, N) * c(1, cumprod(rlnorm(N - 1, mean = p1, sd = p2)))
  return(ss)
}


```

Q1P1: This cell will show how good the Taylor's approximation is if applied to actual PnL.

```{r}
# Question 2 Part 1
taylor_pnl <- function(ss){
  
  days=length(ss)
  # creating the dataframe
  df <- tibble(S=ss, days=1:days) %>% mutate(days=days-1)
  # calculate delta, gamma, vega and theta.
  opt <- rowwise(df) %>% mutate(
    price = GBSOption("c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3)@price,
    delta = GBSGreeks("Delta", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3),
    gamma = GBSGreeks("Gamma", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3),
    vega = GBSGreeks("Vega", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3), 
    theta = GBSGreeks("Theta", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = 0.3) 
  )
  opt[is.na(opt)] <- 0.0 # fill the last row theta and delta with 0.0
  # Create storage.
  option_pnl_l = list(1:nrow(opt)-1)
  approx_pnl_l = list(1:nrow(opt)-1)
  for (pos in 2:nrow(opt)){
    prev_opt_price <- opt$price[[pos-1]]
    # using in-built from R GBSoptions
    option_pnl <- GBSOption("c", S = opt$S[pos], X = 100,
                            Time = (30-opt$days[pos]) / 250, r = 0, b = 0, sigma = 0.3)@price - prev_opt_price
    
    option_pnl_l[[pos-1]] = option_pnl
    # print(option_pnl)
    approxi_pnl <- (opt$delta[[pos-1]] * (opt$S[[pos]] - opt$S[[pos-1]])) + 
      (0.5 * opt$gamma[[pos-1]] * (opt$S[[pos]] - opt$S[[pos-1]]) ** 2) +
      (opt$vega[[pos-1]] * 0) + (opt$theta[[pos-1]] * 1/250)
    # print(approxi_pnl)
    approx_pnl_l[[pos-1]]<-approxi_pnl
  }
  
  option_pnl_l<-as.numeric(unlist(option_pnl_l))
  approx_pnl_l<-as.numeric(unlist(approx_pnl_l))
  
  df_results <- tibble(R_pnl=option_pnl_l, approxi_pnl=approx_pnl_l, days=1:(length(ss)-1))
  
  df_results<- df_results %>% mutate(`absolute error`=(abs(R_pnl-approxi_pnl)))
  
  return(df_results)
}
# creating the price, and running part 1 code
stock_prices = get_price(100,31)
Q1_results =  taylor_pnl(stock_prices)
Q1_results
```


Q1P2: If the realised volatility and implied volatility is the same, `sum(0.5*Gamma*deltaS^2+dt_Theta*dt)` approximately = 0.

```{r}
# Question 1 part 2
# 1) calculate the implied volatility given X is known. r and b known.
# we need to make realised volatility same as implied volatility, 
# price = price of options
Gamma_theta_neutralise<- function(ss){
  realised_var = 0.0
  for (pos in 2:length(ss)){
    rt = log(ss[pos]) - log(ss[pos-1])
    realised_var <- realised_var+rt**2
  }
  realised_vol = ((250/30)*realised_var)**0.5
  # now volatility is realised_vol calculated, create the df as above
  days <- length(ss)
  df <- tibble(S=ss, days=1:days) %>% mutate(days=days-1)
  # calculate delta, gamma, vega and theta.
  opt <- rowwise(df) %>% mutate(
    price = GBSOption("c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol)@price,
    delta = GBSGreeks("Delta", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol),
    gamma = GBSGreeks("Gamma", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol),
    vega = GBSGreeks("Vega", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol), 
    theta = GBSGreeks("Theta", "c", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol)
  )
  
  # now prove that the equation given in the formula is correct
  opt[is.na(opt)] <- 0.0
  
  # do it another way, and define dt.
  opt$lag_S=dplyr::lag(opt$S, 1)
  dt = 1/250  
  result_opt <- opt%>%mutate(delta_S=S-lag_S) %>% .[-1,] %>% mutate(individual_term=(0.5*gamma*(delta_S^2)+theta*dt))
  
  results = sum(result_opt$individual_term)
  return(results)
}

# Question 2 part 2 driver code.
proofResults = c(1:500)
for (i in 1:500){
  stock_prices = get_price(100,31)
  proofResults[i] <- Gamma_theta_neutralise(stock_prices)
}
# plotting the histogram to see if distribution centre around 0.
hist(proofResults, main="Distribution", breaks=40, col=c("green"))

# There are negative terms in the individual terms but the total summation is never lesser than 0.
```

Q2P3: estimating for option pnL
```{r}
# Question 2 part 3
# if realised volaility is greater than implied volatility, "Overall Pnl" is some equation. Prove it
proof3 <- function(ss){
  realised_var = 0.0
  for (pos in 2:length(ss)){
    rt = log(ss[pos]) - log(ss[pos-1])
    realised_var <- realised_var+rt**2
  }
  realised_vol = ((250/30)*realised_var)**0.5

  # now volatility is realised_vol calculated, create the df as above
  days <- length(ss)
  df <- tibble(S=ss, days=1:days) %>% mutate(days=days-1)
  # define the implied volatility
  implied_vol <- realised_vol-0.1
  # calculate delta, gamma, vega and theta.
  opt <- rowwise(df) %>% mutate(
    price = GBSOption("c", S = S, X = 100, Time = (30-days)/250, r = 0, b = 0, sigma = implied_vol)@price,
    delta = GBSGreeks("Delta", "c", S = S, X = 100, Time = (30-days)/250, r = 0, b = 0, sigma = implied_vol),
    gamma = GBSGreeks("Gamma", "c", S = S, X = 100, Time = (30-days)/250, r = 0, b = 0, sigma = implied_vol),
    vega = GBSGreeks("Vega", "c", S = S, X = 100, Time = (30-days)/250, r = 0, b = 0, sigma = implied_vol), 
    theta = GBSGreeks("Theta", "c", S = S, X = 100, Time = (30-days)/250, r = 0, b = 0, sigma = implied_vol)
  )
  opt[is.na(opt)] <- 0.0 # fill the last row theta and delta with 0.0
  opt$realised_vol<- realised_vol 
  opt$implied_vol <- implied_vol 
  dt <- 1/250
  # calculate the calculated pnl on a daily basis.
  calc_results <- opt %>% mutate(calc_pnl = (0.5*gamma*((realised_vol^2) -(implied_vol^2))*S^2*dt))
  
  # # check against the R pnL
  # option_pnl_l <- list(1:nrow(opt)-1)
  # for (pos in 2:nrow(opt)){
  #   prev_opt_price <- opt$price[[pos-1]]
  #   # using in-built from R GBSoptions
  #   option_pnl <- GBSOption("c", S = opt$S[pos], X = 100,
  #                           Time = (30-opt$days[pos]) / 250, r = 0, b = 0, sigma = implied_vol)@price - prev_opt_price
  #   option_pnl_l[[pos-1]] = option_pnl
  # }
  
  # option_pnl_l<-as.numeric(unlist(option_pnl_l))
  # calc_results$R_pnl <- c(0,option_pnl_l)

  
  # summing up the calculated pnl for the 30 days period.
  result_calc <- sum(calc_results$calc_pnl)
  # repeat another set of calculation using Note 2 to cross check.
  # cost_option <- -calc_results$price[1] #cost of option at first day
  # final_payoff <- calc_results$S[length(calc_results$S)]-100 #final day pay off
  # option_pnl <- (GBSOption("c", S = calc_results$S[length(calc_results$S)], X = 100,
  #                          Time = 30/250, r = 0, b = 0, sigma = implied_vol)@price-calc_results$price)[length(calc_results$S)]
  # 
  # note_pnl <- cost_option+final_payoff+option_pnl
  # printing out the results.
  print(paste0("The calculated PnL is: $", round(result_calc,2)))
  # print(paste0("The Note 2 suggested PnL is: $", round(note_pnl,2)))
  return(round(result_calc,2))
}

# stock_prices <- get_price(100,31)
calc_pnl <- proof3(stock_prices)
# Final product do a histogram as in P2 above profit is positive. show that only implied lower than realised, then may earn.
```

Q3: One trade analysis
```{r}
df_hist_vol <- read_csv("VXGSCLS.csv", 
                        col_types = cols(
                          DATE = col_date(format = "%Y-%m-%d")))

# renaming the data column to IV30
colnames(df_hist_vol)[colnames(df_hist_vol) == "VXGSCLS"] <- "IV30"
hist_vol <- df_hist_vol %>% dplyr::filter(IV30!=".")
hist_vol$IV30 <- as.numeric(hist_vol$IV30)
hist_vol <- hist_vol%>%mutate(IV30=IV30/100)

# read goldman stock data.
GS <- read_csv("GS.csv", 
               col_types = cols(
                 Date = col_date(format = "%Y-%m-%d")))

get_data<-function(df1, df2){
  # df1 = hist_vol
  # df2 = GS
  # purpose of this function is to merge 2 df together and prepare for analysis of 1 trade.
  
  # create xts object that is easier to work on time series
  hist_vol_xts <- xts(x=hist_vol$IV30, order.by=hist_vol$DATE)
  price_xts <- xts(x=GS$Close, order.by=GS$Date)
  
  # price_vol_xts contains the date and the price and implied volatility.
  price_vol_xts <- merge(hist_vol_xts,price_xts,join='inner')
  # renaming the columns.
  colnames(price_vol_xts)<- c("IV30", "Close")
  return(price_vol_xts)
}
# merge the 2 dataframe.
merged <- get_data(hist_vol, GS)

# Creating the variables.
dates <- index(merged)
start_date <- min(dates)
#end_date <- max(dates) 
start_price <- merged[start_date, "Close"]
start_volatility <- merged[start_date, "IV30"]

# Creating new df
df <- tibble(date = dates)
df$Close <- coredata(merged[, "Close"])
df$IV <- coredata(merged[, "IV30"])
# ATM so exercise = strike price.
X <- start_price
riskfree <- 0.8 / 100
# Vary S and Time everyday
S <- df$Close
# extract the month from the date
df$M_Y<-format(df$date,"%m-%y")

# filter such that the date ends at 09/30/2019 (exactly 12 months.)
df <- df %>% subset(date<= "2019-09-30")



# Creating the variables.
dates <- index(merged)
start_date <- min(dates)
#end_date <- max(dates) 
df$day1 <- format(df$date,"%d")
start_price <- merged[start_date, "Close"]
start_volatility <- merged[start_date, "IV30"]
df$premium=0
curr_mon=df$M_Y[1]
df$premium[1]= GBSOption(TypeFlag = "p",
                             S = as.numeric(df$Close[1]),
                             X = as.numeric(start_price),
                             Time = (31-as.numeric(df$day1[1]))/365,
                             r = riskfree,
                             b = 0.0,
                             sigma = as.numeric(df$IV[1]))@price

df$Option_DoD_PnL=0 
df$delta_hedge = 0
df$Hedging_DoD_Pnl = 0
flag=0
df$Option_DoD_PnL[1]= -1*df$premium[1]


for(i in 2:nrow(df))
{
  if(df$M_Y[i]!=curr_mon)
  {
    start_price=df$Close[i]
    curr_mon=df$M_Y[i]
    flag=1
    #Settling on the last day of month
    df$Option_DoD_PnL[i-1]=df$Option_DoD_PnL[i-1] + df$premium[i-1]
  }
  df$premium[i] = GBSOption(TypeFlag = "p",
                             S = as.numeric(df$Close[i]),
                             X = as.numeric(start_price),
                             Time = (31-as.numeric(df$day1[i]))/365,
                             r = riskfree,
                             b = 0.0,
                             sigma = as.numeric(df$IV[i]))@price

  if(flag==1)
    df$Option_DoD_PnL[i]=-1*df$premium[i]
  else
    df$Option_DoD_PnL[i]=df$premium[i]-df$premium[i-1]
  flag=0
  
  df$delta_hedge[i] = GBSGreeks("delta", TypeFlag='p', 
                                 S=as.numeric(df$Close[i]), 
                                 X=start_price, 
                                 Time=(31-as.numeric(df$day1[i]))/365,
                                 r=riskfree, 
                                 b= 0.0,
                                 sigma=as.numeric(df$IV[i]))
  
  df$Hedging_DoD_Pnl[i] = -1*df$delta_hedge[i]*(df$Close[i] - df$Close[i-1])
}

df_pnl <- df %>% mutate(DoD_PnL = Option_DoD_PnL + Hedging_DoD_Pnl)
# View(df_pnl)

# calculating max drawdown
DOD_pnl <- df_pnl %>% {
  xs <- .$DoD_PnL
  max(na.omit(cummax(xs) - cummin(xs)))
}

# calculating sharpe ratio
sharpe <- df_pnl %>% {
  xs <- na.omit(.$DoD_PnL)
  (mean(xs) - riskfree)/sd(xs)
}

print(paste0("max drawdown of day-to-day pnl: $", round(DOD_pnl,2)))
print(paste0("sharpe ratio: ", round(sharpe,2)))
#overall cumsum
df_pnl$pnl_cumsum <- cumsum(df_pnl$DoD_PnL)
#option cumsum
df_pnl$opt_cumsum <- cumsum(df_pnl$Option_DoD_PnL)
#stock sumcum
df_pnl$stock_cumsum <- cumsum(df_pnl$Hedging_DoD_Pnl)
```
Overall PnL split into options and stocks, the PnL for our one-trade analysis, segmented by cumulative PnL, Option PnL and Stock PnL.
```{r}
# plotting the pnl plot 

# melt the df_pnl
df_filtered <- df_pnl %>% select(date,pnl_cumsum, opt_cumsum, stock_cumsum)
colnames(df_filtered)[colnames(df_filtered)=="pnl_cumsum"] <- "Cumulative PnL" 
colnames(df_filtered)[colnames(df_filtered)=="opt_cumsum"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="stock_cumsum"] <- "Stock PnL" 

df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "PnL Types" 
ggplot(df_melt, aes(x=date, y=value, col=`PnL Types`)) + 
  geom_line() + xlab("Date") + ylab("PnL") + ggtitle("Overall, Options and Stock Cumulative PnL")+ theme(plot.title = element_text(hjust = 0.5)) +
   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
```

Analysis: Option and stock daily PnL against the time to expiratory. This shows us the daily flunctuation in PnL.
```{r}
# Track PnL against time to maturity.

df_filtered <- df_pnl %>% select(date,Option_DoD_PnL, Hedging_DoD_Pnl)
colnames(df_filtered)[colnames(df_filtered)=="Option_DoD_PnL"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="Hedging_DoD_Pnl"] <- "Stock PnL" 

df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "Daily PnL Types" 

ggplot(df_melt, aes(x=date, y=value, col=`Daily PnL Types`)) + 
  geom_line() + xlab("Date") + ylab("PnL") + ggtitle("Daily PnL against Time to Expiratory (Overall)")+ theme(plot.title = element_text(hjust = 0.5)) +
   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

```

Analysis: Option and stock daily PnL against the time to expiratory. This plot splits the daily PnL flunction into monthly basis. This means different colored lines represents the fluctuation in PnL in that particular month.
```{r}
# Track PnL against time to maturity.

df_filtered <- df_pnl %>% select(date,Option_DoD_PnL, Hedging_DoD_Pnl)
colnames(df_filtered)[colnames(df_filtered)=="Option_DoD_PnL"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="Hedging_DoD_Pnl"] <- "Stock PnL" 


df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "PnL Types" 
df_melt$M_Y<-format(df_melt$date,"%y/%m")
colnames(df_melt)[colnames(df_melt)=="M_Y"] <- "Year/MM"

ggplot(df_melt, aes(x=date, y=value, col=`Year/MM`)) + 
  geom_line() + xlab("Date") + ylab("Daily PnL") + ggtitle("Daily PnL against time to expiratory (Monthly)")+ theme(plot.title = element_text(hjust = 0.5))+
  theme(axis.text.x=element_text(angle=45, vjust=.8, hjust=1))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

```

Backtesting for 1year, closing options and stock option monthly, Delta Hedge of 25% delta. with 100 at-the-money put option.

```{r}
df_hist_vol <- read_csv("VXGSCLS.csv", 
                        col_types = cols(
                          DATE = col_date(format = "%Y-%m-%d")))

# renaming the data column to IV30
colnames(df_hist_vol)[colnames(df_hist_vol) == "VXGSCLS"] <- "IV30"
hist_vol <- df_hist_vol %>% dplyr::filter(IV30!=".")
hist_vol$IV30 <- as.numeric(hist_vol$IV30)
hist_vol <- hist_vol%>%mutate(IV30=IV30/100)

# read goldman stock data.
GS <- read_csv("GS.csv", 
               col_types = cols(
                 Date = col_date(format = "%Y-%m-%d")))

get_data<-function(df1, df2){
  # df1 = hist_vol
  # df2 = GS
  # purpose of this function is to merge 2 df together and prepare for analysis of 1 trade.
  
  # create xts object that is easier to work on time series
  hist_vol_xts <- xts(x=hist_vol$IV30, order.by=hist_vol$DATE)
  price_xts <- xts(x=GS$Close, order.by=GS$Date)
  
  # price_vol_xts contains the date and the price and implied volatility.
  price_vol_xts <- merge(hist_vol_xts,price_xts,join='inner')
  # renaming the columns.
  colnames(price_vol_xts)<- c("IV30", "Close")
  return(price_vol_xts)
}

delta25<- function(S1,Time1,r1,b1,sigma1){
  X1= S1-1
  for(i in 1:100)
  {
    k1= GBSGreeks("delta", TypeFlag='p', 
                                 S=S1, 
                                 X=X1, 
                                 Time=Time1,
                                 r=r1, 
                                 b= b1,
                                 sigma=sigma1)
    if(k1 >-0.25)
      return(X1)
    X1=X1-1  
    }
}
# merge the 2 dataframe.
merged <- get_data(hist_vol, GS)

# Creating the variables.
dates <- index(merged)
start_date <- min(dates)
start_price <- merged[start_date, "Close"]
start_volatility <- merged[start_date, "IV30"]

# Creating new df
df <- tibble(date = dates)
df$Close <- coredata(merged[, "Close"])
df$IV <- coredata(merged[, "IV30"])
# ATM so exercise = strike price.
X <- start_price
riskfree <- 0.8 / 100
# Vary S and Time everyday
S <- df$Close
# extract the month from the date
df$M_Y<-format(df$date,"%m-%y")

# filter such that the date ends at 09/30/2019 (exactly 12 months.)
df <- df %>% subset(date<= "2019-09-30")


# Creating the variables.
dates <- index(merged)
start_date <- min(dates)
#end_date <- max(dates) 
df$day1 <- format(df$date,"%d")


#start_price <- merged[start_date, "Close"]
start_price <- delta25(df$Close[1],30,riskfree,0.0,df$IV[1])


start_volatility <- merged[start_date, "IV30"]
df$premium=0
curr_mon=df$M_Y[1]
df$premium[1]= GBSOption(TypeFlag = "p",
                             S = as.numeric(df$Close[1]),
                             X = as.numeric(start_price),
                             Time = (31-as.numeric(df$day1[1]))/365,
                             r = riskfree,
                             b = 0.0,
                             sigma = as.numeric(df$IV[1]))@price

df$Option_DoD_PnL=0 
df$delta_hedge = 0
df$Hedging_DoD_Pnl = 0

#Quantity
quantity<- 100

flag=0
df$Option_DoD_PnL[1]= -1*quantity*df$premium[1]


for(i in 2:nrow(df))
{
  if(df$M_Y[i]!=curr_mon)
  {
    #start_price=df$Close[i]
    start_price <- delta25(df$Close[i],30,riskfree,0.0,df$IV[i])
    curr_mon=df$M_Y[i]
    flag=1
    #Settling on the last day of month
    df$Option_DoD_PnL[i-1]=df$Option_DoD_PnL[i-1] + quantity*df$premium[i-1]
  }
  df$premium[i] = GBSOption(TypeFlag = "p",
                             S = as.numeric(df$Close[i]),
                             X = as.numeric(start_price),
                             Time = (31-as.numeric(df$day1[i]))/365,
                             r = riskfree,
                             b = 0.0,
                             sigma = as.numeric(df$IV[i]))@price
  
  
  df$delta_hedge[i] = GBSGreeks("delta", TypeFlag='p', 
                                 S=as.numeric(df$Close[i]), 
                                 X=start_price, 
                                 Time=(31-as.numeric(df$day1[i]))/365,
                                 r=riskfree, 
                                 b= 0.0,
                                 sigma=as.numeric(df$IV[i]))  
  if(flag==1){
    df$Option_DoD_PnL[i]= -1*quantity*df$premium[i]
    df$Hedging_DoD_Pnl[i-1]=0
    if(i-2>1)
      df$Hedging_DoD_Pnl[i]=-1*df$delta_hedge[i]*quantity*(df$Close[i] - df$Close[i-2])
  }
  else{
    df$Option_DoD_PnL[i]=(df$premium[i]-df$premium[i-1])*quantity
    df$Hedging_DoD_Pnl[i] = -1*df$delta_hedge[i]*quantity*(df$Close[i] - df$Close[i-1])
  }
  flag=0
}

df_pnl <- df %>% mutate(DoD_PnL = Option_DoD_PnL + Hedging_DoD_Pnl)

```

Calculating max drawdown and sharpe ratio for one-year of back-testing results.

```{r}
# calculating max drawdown
DOD_pnl <- df_pnl %>% {
  xs <- .$DoD_PnL
  max(na.omit(cummax(xs) - cummin(xs)))
}

# calculating sharpe ratio
sharpe <- df_pnl %>% {
  xs <- na.omit(.$DoD_PnL)
  (mean(xs) - riskfree)/sd(xs)
}

print(paste0("max drawdown of day-to-day pnl: $", round(DOD_pnl,2)))
print(paste0("sharpe ratio: ", round(sharpe,2)))
```
Overall PnL split into options and stocks against time to expiry. The PnL is segmented to the option PnL and stock PnL.
```{r, echo=FALSE}
#overall cumsum
df_pnl$pnl_cumsum <- cumsum(df_pnl$DoD_PnL)
#option cumsum
df_pnl$opt_cumsum <- cumsum(df_pnl$Option_DoD_PnL)
#stock sumcum
df_pnl$stock_cumsum <- cumsum(df_pnl$Hedging_DoD_Pnl)

df_filtered <- df_pnl %>% select(date,pnl_cumsum, opt_cumsum, stock_cumsum)
colnames(df_filtered)[colnames(df_filtered)=="pnl_cumsum"] <- "Cumulative PnL" 
colnames(df_filtered)[colnames(df_filtered)=="opt_cumsum"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="stock_cumsum"] <- "Stock PnL" 

df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "PnL Types" 
ggplot(df_melt, aes(x=date, y=value, col=`PnL Types`)) + 
  geom_line() + xlab("Date") + ylab("PnL") + ggtitle("Overall, Options and Stock Cumulative PnL")+ theme(plot.title = element_text(hjust = 0.5)) +
   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

```

Analysis: Option and stock daily PnL against the time to expiratory. This shows us the daily flunctuation in PnL.
```{r}
# Track PnL against time to maturity.

df_filtered <- df_pnl %>% select(date,Option_DoD_PnL, Hedging_DoD_Pnl)
colnames(df_filtered)[colnames(df_filtered)=="Option_DoD_PnL"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="Hedging_DoD_Pnl"] <- "Stock PnL" 

df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "Daily PnL Types" 

ggplot(df_melt, aes(x=date, y=value, col=`Daily PnL Types`)) + 
  geom_line() + xlab("Date") + ylab("PnL") + ggtitle("Daily PnL against Time to Expiratory (Overall)")+ theme(plot.title = element_text(hjust = 0.5)) +
   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

```

Analysis: Option and stock daily PnL against the time to expiratory. This plot splits the daily PnL flunction into monthly basis. This means different colored lines represents the fluctuation in PnL in that particular month.
```{r}
# Track PnL against time to maturity.

df_filtered <- df_pnl %>% select(date,Option_DoD_PnL, Hedging_DoD_Pnl)
colnames(df_filtered)[colnames(df_filtered)=="Option_DoD_PnL"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="Hedging_DoD_Pnl"] <- "Stock PnL" 


df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "PnL Types" 
df_melt$M_Y<-format(df_melt$date,"%y/%m")
colnames(df_melt)[colnames(df_melt)=="M_Y"] <- "Year/MM"

ggplot(df_melt, aes(x=date, y=value, col=`Year/MM`)) + 
  geom_line() + xlab("Date") + ylab("Daily PnL") + ggtitle("Daily PnL against time to expiratory (Monthly)")+ theme(plot.title = element_text(hjust = 0.5))+
  theme(axis.text.x=element_text(angle=45, vjust=.8, hjust=1))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
```

### For the 1 year of back testing results with full trade, we also included the analysis of the distribution of the max drawdown, Final PnL and sharpe ratio in each month in bar charts. We have plotted the Monthly PnL against time-to-expiry. In addition, We also include the distribution in final PnL segmented by each 30 days of trade.
```{r, fig.width=12, fig.height=18}
# Track PnL against time to maturity.

df_filtered <- df_pnl %>% select(date, Option_DoD_PnL, Hedging_DoD_Pnl, DoD_PnL)
colnames(df_filtered)[colnames(df_filtered)=="Option_DoD_PnL"] <- "Option PnL" 
colnames(df_filtered)[colnames(df_filtered)=="Hedging_DoD_Pnl"] <- "Stock PnL" 
colnames(df_filtered)[colnames(df_filtered)=="DoD_PnL"] <- "DoD PnL" 

df_melt <- reshape2::melt(df_filtered, id.var='date')
colnames(df_melt)[colnames(df_melt)=="variable"] <- "PnL Types"
df_melt$M_Y<-format(df_melt$date,"%y/%m")
colnames(df_melt)[colnames(df_melt)=="M_Y"] <- "Year/MM"

#Calculate the maximum drawdown in each month
df_DoD_pnL <- df_filtered %>% select(date, `DoD PnL`) 
df_DoD_pnL$M_Y <-format(df_DoD_pnL$date,"%y/%m")
# colnames(df_DoD_pnL)[colnames(df_DoD_pnL)=="M_Y"] <- "Year/MM"
label_month <- unique(df_DoD_pnL$M_Y)
# storage for sharpe and max drawdown
sharpe_bank <- c()
drawdown_bank <- c()
final_pnl_bank <- c()
riskfree = 0.8/100
pos = 1
for (i in unique(df_DoD_pnL$M_Y)){
  df_selected <- df_DoD_pnL %>% dplyr::filter(M_Y == i)
  #
  max_drawdown_monthly <- df_selected %>% {
  xs <- na.omit(.$`DoD PnL`)
  max(na.omit(cummax(xs) - cummin(xs)))
  }
  
  sharpe_monthly <- df_selected %>% {
  xs <- na.omit(.$`DoD PnL`)
  (mean(xs) - riskfree)/sd(xs)
  }
  
  pnl_last_D <- df_selected %>% {
  xs <- na.omit(.$`DoD PnL`)
  na.omit(cumsum(xs))[length(xs)]
  }
  
  # print(paste0("pnl on last day: ", pnl_last_D))
  # print(paste0("Sharpe for each month: ", sharpe_monthly))
  # print(paste0("Max drawdown for each month: ", max_drawdown_monthly))
  
  drawdown_bank[i]<- as.numeric(max_drawdown_monthly)
  sharpe_bank[i]<- as.numeric(sharpe_monthly)
  final_pnl_bank[i]<- as.numeric(pnl_last_D)
  
  pos<- pos+1
}

df_plot = tibble(monthly=unique(df_DoD_pnL$M_Y), monthly_drawdown=drawdown_bank, monthly_sharpe=sharpe_bank, monthly_pnl = final_pnl_bank)
# plotting the histogram for monthly sharpe and monthly draw down
p1 <- ggplot(df_plot, aes(y=monthly_sharpe, x=monthly, fill=monthly)) + geom_bar(position="dodge", stat="identity") + theme(axis.text.x=element_text(angle=45, vjust=.8, hjust=1))+
  theme(plot.title = element_text(hjust = 0.5))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + ggtitle("Distribution of Monthly Sharpe")

p2 <- ggplot(df_plot, aes(y=monthly_drawdown, x=monthly, fill=monthly)) + geom_bar(position="dodge", stat="identity") + theme(axis.text.x=element_text(angle=45, vjust=.8, hjust=1))+
  theme(plot.title = element_text(hjust = 0.5))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + ggtitle("Distribution of Monthly Drawdown")

p3 <- ggplot(df_plot, aes(y=monthly_pnl, x=monthly, fill=monthly)) + geom_bar(position="dodge", stat="identity") + theme(axis.text.x=element_text(angle=45, vjust=.8, hjust=1))+
  theme(plot.title = element_text(hjust = 0.5))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + ggtitle("Distribution of Monthly PnL")

p4 <- ggplot(df_plot, aes(x=monthly, y=monthly_pnl, group = 1)) + 
  geom_line() + xlab("Date") + ylab("Final PnL") + ggtitle("Final Monthly PnL  vs Time to expiry")+ theme(plot.title = element_text(hjust = 0.5)) +
   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

p5 <- ggplot(df_DoD_pnL)+ 
  geom_density(aes(`DoD PnL`, fill=M_Y), alpha=0.5) +
  facet_wrap(~M_Y) +
  coord_cartesian(xlim=c(-500, 500)) + 
  xlab("DoD PnL") + 
  ylab("Density") + 
  ggtitle("Distribution of PnL within the month") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
  panel.background = element_blank(), axis.line = element_line(colour = "black"))

grid.arrange(p1, p2, p3, p4, p5, nrow = 5)
# Create 
# ggplot(df_melt, aes(x=date, y=value, col=`Year/MM`)) + 
#   geom_line() + xlab("Date") + ylab("Daily PnL") + ggtitle("Daily PnL against time to expiratory (Monthly)")+ theme(plot.title = element_text(hjust = 0.5))+
#   theme(axis.text.x=element_text(angle=45, vjust=.8, hjust=1))+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

```







