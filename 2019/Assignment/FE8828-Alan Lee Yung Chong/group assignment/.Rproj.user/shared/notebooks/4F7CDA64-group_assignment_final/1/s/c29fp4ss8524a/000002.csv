"0","# Question 1 part 2"
"0","# 1) calculate the implied volatility given X is known. r and b known."
"0","# we need to make realised volatility same as implied volatility, "
"0","# price = price of options"
"0","Gamma_theta_neutralise<- function(ss){"
"0","  realised_var = 0.0"
"0","  for (pos in 2:length(ss)){"
"0","    rt = log(ss[pos]) - log(ss[pos-1])"
"0","    realised_var <- realised_var+rt**2"
"0","  }"
"0","  realised_vol = ((250/30)*realised_var)**0.5"
"0","  # now volatility is realised_vol calculated, create the df as above"
"0","  days <- length(ss)"
"0","  df <- tibble(S=ss, days=1:days) %>% mutate(days=days-1)"
"0","  # calculate delta, gamma, vega and theta."
"0","  opt <- rowwise(df) %>% mutate("
"0","    price = GBSOption(""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol)@price,"
"0","    delta = GBSGreeks(""Delta"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol),"
"0","    gamma = GBSGreeks(""Gamma"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol),"
"0","    vega = GBSGreeks(""Vega"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol), "
"0","    theta = GBSGreeks(""Theta"", ""c"", S = S, X = 100, Time = (30-days) / 250, r = 0, b = 0, sigma = realised_vol)"
"0","  )"
"0","  "
"0","  # now prove that the equation given in the formula is correct"
"0","  opt[is.na(opt)] <- 0.0"
"0","  "
"0","  # do it another way, and define dt."
"0","  opt$lag_S=dplyr::lag(opt$S, 1)"
"0","  dt = 1/250  "
"0","  result_opt <- opt%>%mutate(delta_S=S-lag_S) %>% .[-1,] %>% mutate(individual_term=(0.5*gamma*(delta_S^2)+theta*dt))"
"0","  "
"0","  results = sum(result_opt$individual_term)"
"0","  return(results)"
"0","}"
"0","# Question 2 part 2 driver code."
"0","proofResults = c(1:500)"
"0","for (i in 1:500){"
"0","  stock_prices = get_price(100,31)"
"0","  proofResults[i] <- Gamma_theta_neutralise(stock_prices)"
"0","}"
"0","# plotting the histogram to see if distribution centre around 0."
"0","hist(proofResults, main=""Distribution"", breaks=40, col=c(""green""))"
